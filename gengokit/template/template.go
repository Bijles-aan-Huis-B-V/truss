// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (376B)
// NAME-service/handlers/handlers.gotemplate (63B)
// NAME-service/handlers/hooks.gotemplate (63B)
// NAME-service/handlers/middlewares.gotemplate (76B)
// NAME-service/svc/client/grpc/client.gotemplate (3.299kB)
// NAME-service/svc/client/http/client.gotemplate (107B)
// NAME-service/svc/endpoints.gotemplate (7.278kB)
// NAME-service/svc/server/run.gotemplate (3.385kB)
// NAME-service/svc/transport_grpc.gotemplate (3.056kB)
// NAME-service/svc/transport_http.gotemplate (108B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6e\xc3\x20\x18\x84\x67\x23\xf1\x0e\xa7\x4c\xce\x50\xb3\x77\x8d\x3b\x64\x69\xa2\x34\xed\x4e\xec\xc3\x46\x75\x70\x04\xd8\x51\x64\xf9\xdd\x2b\xec\xa8\xca\xc4\x7f\xdc\xc7\x1d\xa0\x14\x76\x7d\x4d\x34\x74\xf4\x3a\xb2\xc6\xe5\x81\xe8\x87\x10\x0a\x94\x07\x7c\x1e\xce\xf8\x28\xf7\xe7\x42\x0a\xa5\x70\xa2\x1f\x9c\xb3\xae\x59\x09\xdc\x6d\xd7\xa1\x1f\xe9\xef\xde\x46\x22\xb6\x36\xc0\xd8\x8e\x2b\xfd\x43\x1f\x6c\xef\xde\x31\x4d\xc5\x73\x9e\xe7\x57\x07\xa5\x8e\x7c\xb5\x93\x4e\x88\x14\x37\x5d\xfd\xea\x86\xb8\x6a\xeb\x92\xb6\xd7\x5b\xef\x23\x72\x29\xb2\x8d\xe9\x74\xb3\x49\x9b\x99\x52\x38\xa7\xce\x2f\xfa\xd1\x56\x4c\xe6\x34\x15\xfb\x85\x3d\xea\xd8\xe2\x6d\x9e\xa1\xc2\x58\xa9\x40\x3f\xd2\x6f\xa4\xd8\xa6\x83\x66\x70\xd5\x12\x9d\x6f\x31\xad\x39\xdf\xb7\x5a\x47\x42\xd7\xb5\x67\x08\x0c\xb0\x06\xb1\xe5\x03\xad\x1e\x89\x0b\xe9\xfe\x1f\x1a\xe9\xd2\x27\xa5\x6b\x04\x29\xb2\xb4\x16\x47\xed\x03\xf3\x25\x3c\x5b\xbb\x8a\xd3\xe0\xf2\xe7\x58\xd2\xe8\xa1\x8b\xbb\xde\x19\xdb\x6c\xa5\x98\xa5\xf8\x0b\x00\x00\xff\xff\x01\x9c\x46\x61\x78\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x17, 0x89, 0x8a, 0xaa, 0x99, 0xb2, 0x34, 0xd7, 0xec, 0xa8, 0x8f, 0x9a, 0x29, 0x93, 0x35, 0x8d, 0x2a, 0xd3, 0x33, 0x6e, 0x75, 0x6, 0x78, 0xd, 0x6a, 0xe9, 0xda, 0x80, 0xbd, 0x1c, 0x87}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xe0\x1d\xb2\x2e\x68\x0e\xe3\x09\x8a\xf9\xc6\x62\xdb\x48\x92\x61\x16\xa5\x77\x9f\xb7\x16\x17\x7a\x01\xa4\xf6\x48\x3f\x22\x58\x31\xd5\x7e\x2d\xf9\x5b\xa7\x74\x78\x70\x62\xfc\x7b\x4d\x04\x8f\x26\xd2\x71\x56\x47\x3c\xd5\xe8\x63\x4e\x6f\x13\x50\xe1\xbd\xef\xb7\x2b\x00\x00\xff\xff\xeb\xa6\xcc\x76\x4c\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xc8, 0x25, 0x5, 0xd9, 0x58, 0x94, 0xe2, 0x24, 0xe6, 0x20, 0x97, 0xcb, 0x5f, 0x27, 0x16, 0x26, 0x8f, 0x35, 0x28, 0xb6, 0x9c, 0xc7, 0xe2, 0xd5, 0x16, 0xe7, 0xae, 0xf7, 0x74, 0x21, 0x28}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xcd\x6e\xdb\x38\x10\x3e\xdb\x80\xdf\x61\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x48\x26\x2c\x93\x2a\x49\xdb\x31\x04\xbd\xfb\x62\x48\xca\x96\x12\xc7\xed\xc1\xb0\xc8\x19\xce\xcf\xf7\xcd\x70\x38\x9b\xc1\x42\xe7\x08\x25\x2a\x34\xdc\x61\x0e\x4f\x07\x70\x66\x6b\x2d\x83\xbb\xcf\x70\xff\xf9\x11\xde\xdf\x7d\x7c\x64\x93\xf1\x6c\x06\x0f\x68\xb6\x4a\x49\x55\x06\x0d\xd8\xcb\xaa\x02\xbd\x43\xb3\x37\xd2\x21\xb8\x95\xb4\x50\xc8\x0a\x83\xf6\x57\x34\x56\x6a\x75\x0b\x4d\xc3\xe2\x77\xdb\xf6\x25\x70\xc7\x1d\xf6\xc5\xb4\x26\x15\xaf\xb4\xe4\x62\xcd\x4b\x84\xd2\xd4\x02\x6a\xa3\x77\x32\x47\x0b\x1c\xca\x87\xe5\x02\x44\x25\x51\x39\x28\xb4\x01\xb7\x42\x32\xf1\x05\xcd\x4e\x0a\x64\xf7\x7c\x83\x6d\x0b\x36\x2e\x27\xe3\xba\x67\x87\x4c\xcb\x4d\xad\x8d\x83\x64\x32\x1e\x4d\x85\x56\x0e\x9f\xdd\x94\xbe\x4b\xad\xcb\x0a\x59\xa9\x2b\xae\x4a\xa6\x4d\x39\xa3\x13\x17\x44\xb3\x0d\x3a\x9e\x73\xc7\x83\x8e\x74\xab\xed\x13\x13\x7a\x33\xab\xd7\xe5\x0c\x8d\xd1\xc6\x4e\xc9\xe1\x40\x56\xea\x9b\xb5\x74\x33\xfa\xa1\xca\x6b\x2d\x95\xf7\x4e\xf6\x9c\xe1\xca\xfa\xd8\xde\x38\x70\x54\xe8\x22\x9b\x8c\x47\xb3\x19\x3c\x12\xec\x31\x7d\xf2\xd6\x34\xec\xa3\xcf\x71\xc9\xdd\x0a\x6e\xda\x16\x66\x76\xe7\x13\xa9\x9f\x80\xa4\xcb\x77\x43\xf9\x74\x32\x4e\x23\xe8\xf7\xb8\x07\x83\x6e\x6b\x94\x05\xae\x3a\x14\xe1\x89\x8b\x75\x28\x8d\x21\xfe\x42\x2b\x85\xc2\x49\xad\x18\x7c\x74\x20\x2d\xb1\xe1\x0d\x19\xb4\xb5\x56\x56\x3e\xc9\x4a\xba\x03\xe8\xc2\xf3\x24\x78\x55\xa1\x01\xa7\x21\x97\xbc\xca\x80\xab\x1c\x2a\xee\xd0\x80\xa8\xb4\xc5\x2c\x28\x9d\x8c\x4e\xc6\xc5\x56\x09\x8a\x2a\xa1\x5d\xb8\xa6\xc4\xd9\xc2\x3b\x5f\x68\xa5\x32\xd0\x35\x29\x5a\x60\x2c\x6e\x7f\xf6\x1b\x29\x24\xf5\x13\x7b\x55\x16\xb4\x42\x93\x81\x67\x27\x85\x66\x32\x1e\xed\xb8\x01\x21\x62\x42\x0b\xad\x0a\x59\x7a\x60\xa9\xb4\x7e\x64\x50\xc0\xed\x1c\x0c\x57\x25\x1e\x5d\xd1\xa9\x11\x1a\x43\x92\x22\xf9\x53\x88\x94\x36\x64\x41\x56\xe1\x8f\x39\x28\x59\x05\x9d\x51\x40\x92\x36\xa2\x4b\xcb\xfe\x33\xbc\x4e\xd0\x98\x0c\xa6\x82\x2b\xa5\x1d\xf0\xba\xae\x0e\xd1\xf8\xd4\x9b\x6a\x27\xe3\x91\xef\x82\x91\xe8\xa5\x64\xc9\xdf\xb7\xef\x83\x4a\x19\xe4\xec\x7d\x9e\x13\xbf\xc3\x42\x1b\x4c\x7c\x48\xb1\xe2\xbf\xf2\x6a\x8b\xf6\x51\x7f\x78\x58\x2e\x3e\xc5\x32\x4e\x84\x60\x2b\xe4\x39\x1a\x9b\xa6\x59\x88\x61\xd4\x34\x37\xb0\x97\x6e\x05\x57\x0e\x29\x00\x46\xfd\x39\xea\x6d\xd7\xeb\x92\xb0\x25\xd9\x95\x43\x16\xbb\x36\xc0\xed\x3d\x92\x6a\x00\xf0\x4a\x76\x5a\x1d\x2b\x9f\xd0\xad\x74\x6e\xa3\xa6\xe7\xa2\x69\x1e\xf5\xbf\x7a\x8f\x06\xae\x64\x64\xed\x7d\x6c\x14\xe8\x3a\x86\x75\x3b\xe1\x58\x00\x9b\x3c\xbd\x7d\x74\x0e\x43\x64\xee\x71\x1f\xc0\x49\xe2\x61\x42\x46\x65\xdd\x62\xda\x34\x5d\x66\x6d\xcb\x9a\xa6\x1f\x74\xd8\x9c\x0e\x74\xe5\xab\xdd\xf7\x4a\xe8\x1c\x09\xdf\x9e\xf8\x01\x7f\x6e\xd1\xba\xa3\xd2\x1d\x9e\x55\xf2\xad\x83\x47\x2d\x5f\xc9\x1f\xb4\x87\xf9\x4a\xb2\x4e\xfe\x78\xa8\xbb\x60\x9a\xf6\xa8\x3c\x28\x19\xc6\x58\x27\x48\x8f\xa0\x25\x69\xd8\xea\xe8\x41\x95\x77\xa4\x76\x9f\xc7\xaf\xc9\xb8\x2b\x62\xbb\x13\x47\x0b\xb6\xf1\x3a\x7d\x56\x5f\x52\x4a\xf7\x4a\xb0\xf9\x8a\x8b\x5b\x00\xb8\x44\x73\xd6\x0f\x60\xd4\x66\xd4\x3f\x93\x71\x37\x16\x08\x2c\x08\xd4\x41\x80\x6f\x32\xbe\x1c\x4a\x1c\x3a\x17\xb1\xa6\xab\x8b\xc3\xf0\x82\x65\xe1\x44\xa7\xf2\x37\xdd\x44\x6e\xc5\xfd\xad\xb7\x43\xe3\x2c\x70\x6f\xd8\x5f\x88\x67\xf2\x01\x83\xd4\xd9\x4e\x03\x87\xad\x45\x73\x93\xeb\x0d\x97\xea\x0d\xd5\xe0\x84\xc1\xd2\xc8\x0d\x37\xb2\x3a\xd0\x99\x62\x5b\x81\x54\xc0\xe3\xf5\xd4\xdd\x87\x17\x53\x49\x7e\x40\x6c\x72\xb6\x08\xff\x99\xaf\xfd\x07\x1f\x8d\x54\x0e\x4d\xc1\x05\x36\x6d\x0a\x49\x6f\x35\xb8\x14\x43\xe4\xb7\xf3\xd3\x41\x96\x5c\xff\xba\x0c\xd3\x53\xb9\x78\x0b\x27\xea\x7a\x05\xf5\x82\xc3\xd0\x27\xbf\xc9\xe1\xa5\xa6\x3a\x4b\x61\x38\x10\x35\xde\x64\xf0\xd7\xec\x04\x0f\x9e\xca\x0b\x74\x7b\xad\xdf\xa3\xf0\x52\x26\xe7\x18\xec\x42\xf8\x5d\xfe\x7e\xfa\xb9\x15\x23\x3a\xc3\x9d\x17\xbc\x45\xdd\xcf\xb3\xc4\x4d\xc6\xee\x50\xe3\x60\x52\x82\x75\x66\x2b\x9c\xf7\x19\x47\x07\x7c\xfb\x6e\x9d\x91\xaa\x3c\xb5\x6c\x7f\x48\x05\x96\x08\x02\xbf\xf2\x6c\x6c\x74\x2e\x0b\x89\x36\x4c\xff\xe3\xcb\xc2\x4f\x62\xef\x72\x60\x80\xce\x26\xd7\xfd\x28\xd2\x90\x3a\x79\xf3\xd8\x2e\xdc\x73\x37\xdf\xbe\xa0\xca\x93\x35\x1e\xfc\x03\x21\xc4\x95\x0e\xcd\x35\xa7\xc4\xbd\x65\x0d\xe7\x6c\x87\x81\xae\xbb\xf9\x08\x73\x20\xa3\xb4\x77\x9a\xf1\x61\x62\xb6\xc7\x30\x2e\x8d\x5a\x1f\x52\x87\x54\x0a\xe7\xa6\x76\xbf\x68\x5f\x06\x29\xdc\xf3\xeb\x12\xd9\xe4\x70\xdd\x3d\x49\xd9\xa7\xbb\xf4\xa5\x46\xc8\x81\x66\x6c\xcd\xe5\x80\xa8\x51\xf7\xda\x59\x9f\x5e\x3b\x3e\xc2\x30\x59\x65\x01\xbb\x0c\xb4\x17\x0a\xf7\xcc\x7c\x46\xc9\x3a\x65\x49\x8c\xff\x2f\x12\xc6\x29\x1c\x6c\xcf\xe9\x59\x43\xd8\xfb\x65\x06\xeb\x0c\x76\x61\xec\xb4\xf1\x85\x13\xdf\x4c\x41\x7d\xf0\x6a\xba\xde\xe4\x30\x87\x63\x26\xff\x68\xa9\x92\xeb\x4d\x9e\x9d\xb6\x96\x74\x28\x98\x66\x8c\xa5\x69\xcf\x64\x44\x49\xb8\xe7\x23\x1d\xff\x07\x00\x00\xff\xff\x2f\xd5\x1f\xf3\xe3\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3299, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xe5, 0xb5, 0xba, 0x75, 0x9a, 0xbe, 0xef, 0x38, 0x68, 0xa3, 0xdd, 0x67, 0xb3, 0x47, 0x9, 0xe0, 0x86, 0x3a, 0x1, 0xe0, 0xef, 0x7e, 0xc8, 0xca, 0x3a, 0xa2, 0x55, 0x74, 0x6f, 0x9b, 0x51}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xe3\xb8\x11\x7e\x76\x80\xfc\x0f\x73\x46\x8a\xb5\x0f\x5a\xf9\xfa\xba\x0b\x3f\xb4\xbb\xb9\xdb\x00\xdd\x1f\xb8\x6c\x7b\x0f\x41\x70\xa0\xa5\x91\x4d\x84\x22\x75\x24\x65\xc7\x15\xfc\xbf\x17\xc3\x1f\xb2\x64\xcb\x76\xb6\x87\x02\xc5\xe1\x1e\x16\x49\x44\x72\x38\xf3\xcd\x37\x1f\x87\xdc\xd9\x0c\xde\xa9\x1c\x61\x89\x12\x35\xb3\x98\xc3\x62\x0b\x56\xd7\xc6\xa4\xf0\xfe\x33\x7c\xfa\xfc\x15\x6e\xdf\xdf\x7d\x4d\xaf\xaf\x66\x33\xf8\x19\x75\x2d\x25\x97\x4b\x3f\x03\x36\x5c\x08\x50\x6b\xd4\x1b\xcd\x2d\x82\x5d\x71\x03\x05\x17\xe8\x67\xff\x0b\xb5\xe1\x4a\xbe\x81\xa6\x49\xc3\xef\xbb\x5d\x77\x04\xde\x33\x8b\xdd\x61\xfa\x9b\xa6\x5c\x5f\x55\x2c\x7b\x62\x4b\x04\xb3\xce\xe8\xcf\xd9\x0c\xbe\x46\xe3\x90\x29\x69\x19\x97\x06\x4a\xb4\x2b\x95\x1b\xb0\x0a\x4a\xf6\x84\xc0\x65\xce\xd7\x3c\xaf\x99\x00\x94\x79\xa5\xb8\xb4\x06\x0a\xad\x4a\x30\xa8\xd7\x3c\x43\x93\x38\x53\x1a\x7f\xab\xd1\x58\x60\x32\x07\x8d\xa6\x52\xd2\x20\xd8\x6d\x85\xce\x14\xcd\xa5\x58\x94\xc1\xbd\x99\x04\x98\x81\x0d\x0a\x41\x3f\x51\x66\x2a\x47\x6d\xc8\x80\x33\x98\x63\xf8\x50\x28\x1d\x56\x3a\x73\x89\xfb\xc0\x08\xa4\x02\x54\xad\xc1\xd4\x55\xa5\x34\xa1\x6c\x35\x93\x86\x7e\xa7\xfd\x38\x13\xfc\xdf\xcc\x72\x25\x9d\xb9\x42\xe9\x92\x59\x93\x52\xe4\xbc\x74\x93\x26\xd7\x57\xa3\x71\x51\xda\x31\xfd\x24\x00\xf0\x99\x7e\xa7\xbf\x96\xdc\xae\xea\x45\x9a\xa9\x72\xb6\x54\xaf\x9f\xb8\x9d\xd1\xbf\xe8\xb9\x9f\x54\x2d\x60\xdc\x34\xe9\x97\xbf\xdf\x39\x73\x5f\x98\x5d\xc1\xeb\xdd\x6e\x7c\x7d\x35\x0d\xf0\xde\xb6\x80\x65\x4a\x08\xcc\xac\x89\x7e\xdb\x55\x07\x07\xb0\x2b\x66\x21\x53\x65\x45\x41\x32\x09\x2c\xcf\x23\xba\x29\xdc\xd9\x57\xc6\x59\x2b\x91\x49\x4b\x60\x2e\x10\x6a\x83\x39\xa1\xc6\x60\x85\xa2\x42\x0d\xc6\xea\x3a\xb3\x09\x0d\x87\xbd\x86\xb7\xe2\xd2\x2a\x60\xce\x9e\xe1\x72\x29\x10\x2a\xa6\x59\x89\x16\xb5\x23\x98\x1b\xb9\x93\xc0\x7c\xca\x74\x02\xdc\xbe\x32\xb4\x5f\x51\x0b\x87\x7c\x51\xcb\x8c\x50\x0d\x6e\x4b\x24\xe0\x15\xa8\xca\x51\x1d\x14\xad\xad\x50\xbf\x8e\x7b\x3a\x8b\x0b\x66\xb8\x49\xe1\x47\xa5\x01\x9f\x59\x59\x09\x4c\x60\xab\x6a\x28\xf9\x72\x65\xa1\x62\x86\xf2\xde\xc1\x8b\x9c\x6c\x77\xf2\x1b\x55\x5a\xe5\x75\x86\x1e\x0b\x26\x61\x65\x6d\x95\x7e\x60\x32\x17\xe4\xe5\x86\xdb\x15\x20\xcb\x56\x81\xc0\x30\x89\xfb\x4f\x61\xc3\x35\xe6\x50\x57\xde\xaa\xa9\x30\xe3\x05\xcf\xa0\x62\x76\x95\xc2\xe4\xce\x7b\xc8\x0d\xed\xb0\x60\x0b\xb1\x05\x06\x25\x37\xd6\xb3\x1f\x72\x34\x7c\x29\x69\x2d\x97\x6b\xf5\x84\x0e\xd0\x7b\x9f\x9d\xb6\x5a\x9c\x93\x78\x90\x74\x9f\x13\xb2\x11\xd1\x4c\xa7\x7d\x8c\x33\xc1\x51\xda\x3e\xc6\x9d\x0c\xee\x6b\x4f\x6c\xa9\x42\xbd\x41\xcc\xcf\xe6\x93\x8a\xc4\x23\xc6\x09\xe7\x12\x3d\xc3\xf6\x3e\x73\x69\x51\x17\x8c\xb8\x35\x9c\x0f\x67\xad\xdd\x6e\x58\x01\x6a\xe3\x15\x2b\x14\xdc\xcc\x65\xe3\x13\x6e\xde\x85\x88\x32\x55\x2e\xb8\x74\x60\x95\xc1\xc9\x4e\x7e\x93\x20\x13\xb6\xd6\x12\xb8\x23\x35\x79\x98\x31\x21\x50\x7b\x5e\x07\x6f\xd3\xeb\x2b\x17\xd0\x11\xaa\xcd\xf5\xd5\x88\x36\xbd\x77\xc0\x7e\xae\x3c\x25\x01\xa0\x64\xd5\x83\xb1\x9a\xcb\xe5\xe3\xc3\x23\xcd\x68\x9d\x4c\xbb\x73\xc3\xf2\x9f\xbd\x6c\xbd\x8f\x62\xd3\x5d\xde\x5f\xec\xa7\x84\xf9\x3f\xd6\x32\x6b\x2d\x78\xb1\xbb\x8d\x02\x76\xd2\x82\x9f\x11\xe7\x7b\x13\x4d\xa3\x99\x5c\x22\xdc\x70\x78\x33\x87\x34\x46\xfd\xd1\xf3\x8a\x74\x7b\xd4\x34\x37\x3c\xfd\xc4\x4a\xdc\xed\x22\x0a\x14\x67\xcc\x45\x7a\xdb\x16\x5a\xd3\xbc\xa6\xcf\xb4\x6a\x77\x28\x41\x2f\xda\x8a\x2a\x0e\x26\x1d\xb4\xa7\xd0\xd9\x7d\x92\xd9\x67\x08\x3a\x99\xbe\xf3\x3f\x13\xa2\xf7\xf7\xd5\x22\x6d\x9a\x9f\x14\x4d\x83\x1b\x9e\x06\x90\xbe\x6e\x2b\x0c\x4b\xa7\x30\x39\x9e\xe4\x71\xe8\xcc\x4a\x00\xb5\x56\x7a\xea\x92\x3b\x8a\xa7\x88\xfb\x4a\x2e\x63\x3a\x00\x05\x39\x45\x4e\x4c\x69\x09\x2f\xdc\xdc\xef\xe6\x20\xb9\xf0\x56\x46\x81\x65\x92\x0b\x67\x88\xbe\xed\xbc\x79\xf7\x3d\xee\x92\xbe\xc4\xc1\x69\x42\x76\xae\xaf\xc8\x42\xd3\x04\xa8\x1d\xce\x1f\x49\x2d\x7a\x60\x3b\x45\xba\xb1\xe8\xc0\x0e\x89\xec\x26\xe0\xc6\xe2\x60\x0e\x7c\x12\xc8\xde\x50\xb4\x06\x9c\x97\xdd\xc5\x7e\x86\xe7\xf6\xf4\x98\x16\x7d\x18\xc8\xf8\x70\x1e\xe3\x01\xde\xca\x43\x43\x59\x6b\x8f\xf2\xce\x67\x9f\x90\x6e\xaa\xc8\xfc\x6f\x14\x54\x30\x32\x04\xe6\x11\x25\xfc\xc2\x75\x9b\x5e\x93\x1e\x70\xcd\xf9\x14\xa6\x0d\x65\x76\x30\xb7\x21\xbb\xed\xd8\x3a\xa6\x2c\x0c\xf8\x44\x84\xd4\xf5\x73\xf8\x8b\x66\xd5\xdf\x84\xb8\x7d\xce\xb0\xb2\xb0\xd1\xac\x32\xfe\x48\x69\xa1\x2c\x38\x8a\x9c\x0e\xd5\x20\x42\x7b\x55\x72\xd9\xf6\x3a\x3c\xd0\x30\xa4\x1f\x79\x9e\x0b\xdc\x30\x1d\xda\xb8\x7f\x9a\xd8\xd9\x51\x2f\x53\x55\x62\x4b\x72\x4a\xc7\x84\x25\xf3\x65\x3b\xdd\x1d\x85\xb8\x46\xbd\x6d\x33\x4b\x15\x47\x6a\x69\x5a\x85\x9c\xcd\xc0\x8b\x1a\x1d\x14\x49\x47\xa5\x33\x26\xa9\x5b\xa0\xf3\x15\x73\x5a\xb7\xd8\x82\xa4\x8c\xf8\x2e\x02\x9f\x33\x51\xe7\x98\xfb\x7e\x6e\x81\xe4\x03\x85\x5d\x61\x9e\x1e\x23\x32\xd9\x7b\x95\xc0\xf8\xde\x32\x5b\x9b\x71\x02\xe3\x2f\x5c\x2e\xc7\xd3\xeb\xab\x28\x1e\xdf\x77\xd4\xe3\x94\x01\x18\x40\x26\xd9\xfb\x93\xa6\xa9\x57\x50\xcf\x2f\x2e\xc3\xf7\x37\xf3\xae\xba\xfa\x24\x34\x3b\xc7\x06\xd2\xbe\x8b\xfa\x36\x1a\x8d\x3b\x1c\x1b\xbf\x81\x66\x97\xc4\xc5\x81\x09\x23\xc7\x86\x11\xe5\xe5\x57\xf2\xc8\xb1\xda\xd9\x6d\xbd\x6b\x82\xd4\xfc\x9a\x80\x7a\xa2\xf1\xe8\xdf\x03\x3e\x3f\xbe\x85\xef\xd4\x53\x20\x68\xc5\x24\xcf\x26\x45\x69\xd3\xfb\x4a\x73\x69\x8b\xc9\xf8\x36\x1a\x69\xb3\xf9\xea\x2f\xe6\x15\xe4\x0a\x0d\x48\x65\x01\x9f\xb9\xb1\x6f\xc1\x20\x76\x49\xd0\x12\xc9\xa4\x4b\x35\x26\xb7\xa6\xd3\x56\xc8\x72\x14\x68\x71\x12\x9d\x70\xa3\xbd\x38\xb8\xcc\xf6\x51\xb4\x58\x7e\x0b\x6a\xbc\x70\x46\xe6\x73\xe8\xe1\x17\xeb\x70\x50\x98\x61\xde\x89\x60\x32\x38\x65\xba\x2f\xcb\x83\x0c\xc4\x92\xfc\x07\x5b\xa0\xc0\x7c\x4f\x12\x7f\x3d\x5a\xa2\x8d\xa4\xee\xb6\xb7\x9e\xdb\x9b\x15\xca\x76\x54\x75\x79\x1c\xac\x79\x36\x26\xbe\x00\x43\x89\xd4\x7e\x36\xf8\x4b\x17\xf3\x57\x37\x9e\x51\x83\xa7\x79\x16\x1a\xf0\x8e\x17\x2b\x9e\xad\xdc\x5a\x83\x72\xc8\x89\xd0\xd1\x84\xe5\xb1\xa3\x53\x3a\xf6\x33\xc7\x81\x39\x65\xf6\xcc\x4e\x8e\x55\x7c\x40\xd8\xfb\xaa\xd5\x8b\xed\xbf\x17\xaf\x23\xbf\x92\x10\xab\xc3\x5d\x63\x86\x7c\xed\x5b\x60\x17\xe6\xc1\xfd\x22\x85\x7b\xc4\xbd\x9d\x8e\x19\x37\x12\x7b\xf3\x56\x15\xc8\x55\x62\x68\x8e\x96\x71\xe1\xda\xe8\x58\x65\xfe\xd2\x16\x6e\x00\x4c\x70\xbb\x4d\xcf\x4a\x4c\x2f\xfe\xae\xd2\x7c\x33\xae\x7f\xea\xd0\x1f\x58\x87\x7a\xeb\x92\xe1\x96\xf2\xb2\x2c\x05\xce\xfd\xc2\xed\xea\x83\xb5\x95\x3f\x7c\xcf\x94\x1e\x4a\xab\xb7\x54\x2c\x05\x17\x98\xc3\x87\xa3\x7b\xcb\x85\xaa\x3c\x7d\x8d\x79\x51\x3b\xe1\x2f\x9f\xa0\xc2\x66\xff\x07\x1d\xc5\x10\x72\x13\xd3\x89\xeb\x5b\x3b\x8c\x8b\x06\xcf\x60\xf8\x67\xc1\xff\x0f\x0a\x9e\x1a\xf6\xf4\xf8\x82\x3e\xef\x34\xf0\x83\xe3\xee\xd5\x71\xf2\xc2\x4b\x7c\xd8\xee\x92\xba\xac\xd9\x9e\xfc\x17\xde\x04\xc8\x6f\x15\xe1\x1d\x70\xf0\x81\xcb\xec\xf1\x2d\xb4\x48\xab\xd6\x6f\x22\xb9\xcc\x27\x2a\x01\x73\xe0\xe1\x68\x07\x28\x0c\x1e\xad\x70\x91\x9e\xf3\x27\x81\xbf\x4e\xbb\x6b\x1e\x7e\x78\x84\x79\xcf\x7c\x9b\x8b\x53\xae\xc2\x3c\x46\xde\x57\xb0\x9f\xd0\x1e\xab\x90\xbf\x32\xf9\x47\xca\xd3\x5e\x01\x33\x46\x65\xdc\xbd\x6b\x3b\x8d\x22\xe9\x58\xf2\x35\xca\xfd\x59\xba\xaf\xd5\x4e\xa9\x0e\xed\xd9\x3e\xd3\x41\xac\xbb\x73\x80\xf8\xa2\x2c\x62\x48\xe7\xf2\x14\xed\x76\x92\x15\x6e\x84\x3d\x3c\xe2\xc7\x17\xe4\xe2\x87\xe9\x1e\xbe\x7b\x1f\x4a\xff\xf5\x88\x80\xe1\x4b\xe9\x5e\x65\xcf\x3f\x1d\x81\x7f\x0f\x3b\x0f\xd7\xe0\x1e\x87\x78\x25\xf1\x9d\xfc\xd2\x96\x5e\xd0\x3c\x52\x07\x8f\x5e\x7b\xac\x60\x1e\xcd\x1d\x31\xe5\x20\xd4\x48\x15\xca\xfd\xa5\x60\x7f\x27\x5f\x2e\x01\x50\x30\x21\x16\x2c\x7b\xba\x8c\xc0\x25\x47\x03\xbb\x02\x04\x7d\x76\x9d\xc4\xec\x88\x5f\x2d\x82\x5d\x7e\x45\x27\x07\x28\xd4\x7b\x3e\x3c\xc9\xa1\xe3\xc7\xc3\x6f\x23\x51\x6f\x97\x63\x10\xc3\x7f\xbf\x5c\xdc\xb4\x4f\xa3\xfe\xcb\x67\x8f\x47\xc1\xe0\x00\x8f\xfa\xf1\x9e\x26\xd2\x40\xc4\xbf\x9b\x49\x17\x50\x38\x41\xa5\x21\x18\x2e\xfa\x1a\xc8\x14\x70\x38\x24\xd3\x29\xe4\x8e\xd8\xd4\xe2\x78\x92\x4d\xff\x09\x00\x00\xff\xff\x2a\x89\x56\xf9\x6e\x1c\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 7278, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xf2, 0x38, 0x92, 0x88, 0xc, 0x13, 0x3, 0xd4, 0x18, 0x3c, 0x12, 0x56, 0x41, 0xb3, 0xf9, 0xef, 0xc0, 0x12, 0x7e, 0x19, 0x69, 0x9b, 0x14, 0xfa, 0x63, 0x30, 0x40, 0xe0, 0xf1, 0x4a, 0xda}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4f\x6f\xdb\x3a\x12\x3f\xcb\x80\xbf\xc3\x54\xe8\x2e\x64\xc0\xa5\x0a\xec\x76\x0f\xde\xfa\xd0\xc6\x69\x1b\xa0\x49\x0d\xc7\xed\x3b\x3e\xd0\xd2\x48\x26\x2a\x91\x7a\x24\x65\x37\x10\xfc\xdd\x1f\x86\x94\x64\xd9\x4d\xdc\xe6\xe5\x10\x4b\xe4\xcc\x6f\x7e\xf3\x5f\x71\x0c\x57\x2a\x45\xc8\x51\xa2\xe6\x16\x53\xd8\x3c\x80\xd5\xb5\x31\x0c\x16\x5f\xe0\xee\xcb\x1a\xae\x17\x37\x6b\x36\x1e\xc5\x31\xac\x50\xd7\x52\x0a\x99\x7b\x09\xd8\x8b\xa2\x00\xb5\x43\xbd\xd7\xc2\x22\xd8\xad\x30\x90\x89\x02\xbd\xf4\x37\xd4\x46\x28\x39\x83\xa6\x61\xed\xf3\xe1\x30\xbc\x81\x05\xb7\x38\xbc\xa6\x77\x12\x19\x8f\x2a\x9e\x7c\xe7\x39\x82\x41\xbd\x43\x4d\x27\xa2\xac\x94\xb6\x10\x8d\x47\xd0\xfe\x85\x59\xc1\xf3\x70\xf0\xae\xcc\xf0\x2d\x2b\x6d\x38\x1e\x05\x61\xa1\x72\xf7\x2b\xd1\x76\xbf\xf1\xd6\xda\xea\xe4\x25\xae\x2a\xad\xb2\x90\x0c\x05\x71\x0c\xff\x49\x61\xc9\xb5\x7d\x20\x91\x5c\xa9\xbc\x40\x96\xab\x82\xcb\x9c\x29\x9d\xc7\xb9\xae\x92\x5e\x74\x4d\x4e\xdf\xa3\xde\x89\x04\xc7\xa3\xa0\xda\x40\xd8\x34\x6c\xf9\xfe\xc6\xf1\x5d\x72\xbb\x85\x57\x87\x83\x33\xd6\x34\xec\xf4\x14\x62\xb3\x4b\x9e\xba\xda\x72\x99\x16\xa8\xc9\xa7\x09\x19\xdb\x71\x0d\x0b\xcc\x78\x5d\xd8\x2b\x25\x33\x91\x83\xff\xa1\xbb\xac\x96\x09\x08\x29\x6c\x34\x81\x66\x3c\x0a\x28\x32\xec\xde\x6a\x21\xf3\x6f\x5c\x47\xff\x3e\xd1\x63\x0b\xdc\xd4\xf9\xbb\x34\xd5\x53\x08\x53\x7a\x66\x3c\x4d\x75\x38\x85\x70\xf6\xe6\xf5\xff\x5e\xd3\x83\x13\x01\x2e\x53\x28\xd1\x6a\x91\x18\x28\x84\xb1\x28\x81\x24\xd1\x98\x70\xf2\x4b\x2b\x9f\xd6\xeb\x65\x6b\x84\x22\x3c\xb4\xf1\xc6\xd9\x20\x81\xe7\xc3\x7e\x5c\x2d\xaf\x5a\x58\xca\xc3\x10\xf6\xbf\x0e\x36\x5f\x2d\xaf\x20\x22\xf0\xc9\x23\xe8\x3e\x69\x5f\x0d\x02\xca\x9d\xd0\x4a\x96\x28\x2d\xec\xb8\x16\x7c\x53\xa0\x99\x82\xc8\xc0\xa0\x65\xf0\xa1\xe0\xb9\x81\x2d\xdf\x21\x54\x5a\x28\x2d\xec\x83\x2b\x75\xb8\x96\x3b\x92\x37\x6c\x3c\x0a\x44\xe6\xb0\x61\x36\x07\x65\xd8\x47\xb4\x28\x77\x51\xb8\xb8\x7e\xff\xf5\xe3\x9f\xef\x16\x8b\x55\x38\xf9\xbf\x17\x78\x31\x87\x30\x74\xa9\x09\x9e\xc8\x05\xcc\x9d\xe4\x78\x14\x1c\x3c\xb0\x2b\xf7\x53\xe0\xe5\x97\xd5\x9a\x20\xdd\xd5\x93\x90\x5d\xe0\x61\x0e\x59\x69\xd9\x7d\xa5\x85\xb4\x59\x14\xce\xfe\x65\xc2\xa9\xd3\x9d\x1c\xad\x3c\x42\x9f\xf4\x7f\x93\xfd\xc0\xd4\x29\xf9\x47\x60\x29\x71\xbf\x09\xdb\xe5\xf8\x04\xd6\xcd\x05\x37\xae\x5c\xf1\x27\x4a\x5a\x2e\xa4\x01\xbb\x45\xd0\xf8\x57\x2d\x34\xa6\x90\x09\x2c\x52\x03\x99\xd2\xd0\x8d\x2a\xde\x0f\x11\xfb\x50\x61\xa7\x6e\xac\xae\x13\xeb\x8c\xf7\x4e\x18\x57\x73\xe3\x51\x70\x4c\x4a\x7f\xd4\x53\xea\x4e\x0e\x7d\xdf\xdd\xe1\xfe\x5a\xa6\x95\x12\xd2\x9a\xc8\xf8\x49\x00\xd5\x86\x35\x0d\x6b\xe7\x02\xbb\xe3\x25\x1e\x0e\xf7\x8e\xc7\x04\xcc\x2e\x61\xbd\x86\xa3\x10\xc7\xf0\xbe\x36\x42\xa2\x31\x90\xaa\x92\x0b\xc9\xba\x52\xfd\x43\xf3\xaa\x9b\x2f\xb0\x17\x76\x0b\xa5\x48\xd3\x02\xf7\x5c\xa3\x61\x70\x8f\x08\xdd\xa4\x88\x87\x37\xb9\x1a\x8f\x82\x8e\xcd\xbc\x97\x61\x84\xd7\xc2\x75\x64\xfb\xb6\xe8\x48\x1d\x39\x04\x34\x75\xa2\xf1\x28\x68\x1a\xcd\x65\x8e\xf0\x52\x50\x5a\x7b\xc7\x6e\xd1\x6e\x55\x6a\x68\x62\x51\x1a\x9b\x66\xad\x3e\xab\x3d\x6a\x78\x29\x5a\xa7\x7b\xcc\xb9\xf3\xfb\x96\x7f\xc7\xa6\xf9\xe9\x76\x40\x25\x68\x1a\x94\xa9\xc3\xf3\xc4\xb0\x0f\xd5\x6c\x7e\x1a\xbb\xe6\x19\xc4\x7e\x32\x39\xa3\x2d\x71\x81\xf0\xf4\x84\xca\xe1\x24\x1f\x06\x0b\x4c\x68\x59\x1e\xd3\xf8\xdc\xd4\x1c\xbd\x3a\x4b\xce\xb1\x96\x7a\x11\x1f\x07\x8d\xb6\xd6\x12\xfa\xd3\x63\x4b\xac\x6a\x09\xc6\x72\x6d\x0d\x70\x90\xb8\x07\x1a\xb8\x6d\xd9\x4f\xc1\x0d\xc4\xee\x85\x46\x3a\x07\x37\xf5\xdb\x33\xcf\xdc\x6e\xd1\x41\x55\xdc\x18\x4c\xa9\xbb\xa8\x4b\x48\xba\x50\x79\x4e\xdd\xe3\x6a\x7d\x55\xcb\x28\xc9\xba\xd5\xe3\x97\x4d\x57\x64\xb3\x81\x23\x77\xb8\xef\x8a\x6c\x72\x9e\xc2\xc7\xfa\xa5\x2f\xc1\x5b\x4c\xb6\x5c\x8a\x84\x17\x83\x22\x44\xad\x13\xd2\x2c\xf9\x77\x8c\xe8\x1e\x50\x6b\xa5\x7b\xa5\x1b\x69\x51\xeb\xba\xb2\x1d\x01\x52\xca\xd5\x91\x4e\x2f\xf0\xc9\x9f\x44\x84\xd8\xab\xfb\x65\xe7\x77\x45\xaf\x4b\xee\xb6\xdb\x34\x28\x54\xce\x96\x34\x45\x0b\x19\x85\x56\x73\x69\x68\x8a\x86\xdd\xfa\xa4\x87\x76\x0d\x25\xd9\x60\xa4\x7b\x03\x41\xe9\x22\x43\x2b\xb0\x8d\x0a\xde\xd6\x3f\x5c\x58\x82\x92\x79\x42\x51\x18\x3b\x24\xff\x19\x12\x87\x53\x2f\xdf\xb2\xfd\x40\x54\xdc\x0d\xbb\x91\x29\xfe\x98\x5c\xd2\x4d\xca\xb4\x10\x12\x9f\x86\xb8\xf2\x02\x17\x41\xe8\x9f\x28\x2e\x80\x2c\xbd\xc0\x45\x10\xf3\x50\x6e\x54\xf1\x34\xc6\xbd\xbb\xbf\x08\x61\x35\x4f\x2e\xb0\x58\xd3\xf5\xa4\x0d\xb3\x2b\x92\xb7\xaf\xbc\xec\x67\x97\xcc\x77\x32\x75\xf1\x8e\x4e\xd2\x32\x85\xd2\x2d\xc0\xa8\x2f\x00\xf7\x25\xd2\xe7\xf5\x59\x05\x40\xaa\x67\xf9\xef\xf6\x89\x73\x6c\xdb\x0d\x2d\x1a\x7c\x74\xd3\x57\xe0\xa0\xb9\x7f\x4d\xfe\xf8\x31\xb5\x3d\xe3\xee\xba\xfb\x9f\x71\x27\xd5\x70\x3a\xa4\xde\x6d\x39\xc7\xa9\x90\x53\xea\x33\x72\x40\xa2\x6d\x59\x45\xa1\x4d\xaa\xc7\xa4\x45\xe6\x84\x5f\xcc\x41\x8a\xc2\x5b\xee\xbd\x42\xad\xdd\xbb\x9f\x60\xf4\xe8\xc7\x69\x60\xf4\x6e\x18\x1f\x02\xf4\x4b\xf2\x2c\x3c\x6e\x6e\xb8\xcf\xbd\xae\x85\xb4\x6f\xa0\x6a\xc3\x56\x98\x13\x33\xfd\xc4\xba\x8d\xcc\x14\x8c\xde\x9d\x15\x89\x61\x3e\xb6\x85\x3c\x0b\xe7\xaa\x96\x2f\xc6\xa3\xd3\xa0\xe1\x0f\x41\xf1\x7a\xfb\xaa\x9d\x1a\x8e\xfc\xdf\x01\x00\x00\xff\xff\xe3\x8a\xc9\x38\x39\x0d\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3385, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xdd, 0x59, 0xa1, 0xce, 0x1a, 0x2b, 0x34, 0xcd, 0x93, 0x43, 0x90, 0xf9, 0xe2, 0x37, 0x40, 0x9e, 0xee, 0x47, 0x3e, 0xb1, 0x99, 0x56, 0x52, 0x40, 0xf, 0xd1, 0x8b, 0x51, 0x82, 0x90, 0x6a}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xe2\x38\x14\x7d\x06\x89\xff\x70\x17\x8d\x56\x30\xa2\xce\x3e\x57\xea\xcb\xb4\xdd\x69\xb5\xdb\x0f\x75\xd1\xec\xc3\x68\x34\x32\xc9\x25\xb1\x48\xec\xd4\x36\xb4\xac\xc5\x7f\x5f\x5d\xdb\x09\xa1\x50\xca\x3c\x20\x11\xfb\xf8\x7e\x9c\x73\x7c\x93\x24\x81\x4b\x95\x21\xe4\x28\x51\x73\x8b\x19\xcc\xd6\x60\xf5\xd2\x18\x06\x57\x0f\x70\xff\x30\x85\xeb\xab\xdb\x29\x1b\xf4\x93\x04\x9e\x50\x2f\xa5\x14\x32\x0f\x08\x78\x11\x65\x09\x6a\x85\xfa\x45\x0b\x8b\x60\x0b\x61\x60\x2e\x4a\x0c\xe8\x6f\xa8\x8d\x50\xf2\x1c\x9c\x63\xf1\xff\x66\xd3\xdd\x81\x2b\x6e\xb1\xbb\x4d\xcf\x04\x19\xf4\x6b\x9e\x2e\x78\x8e\x60\x56\x29\x3d\x26\x09\x4c\x9b\xe0\x50\x6b\xb5\x12\x19\x1a\x30\xa8\x57\xa8\xcf\x8c\xc8\x10\x66\x42\x66\x42\xe6\x06\xe6\x4a\x83\x2d\x10\xf2\xa7\xc7\x4b\xb0\x9a\x4b\x53\x2b\x6d\x43\x45\xb7\x16\x96\x56\x94\xe2\x3f\x34\x1e\xd3\x6e\x27\xb9\xae\x53\xf6\x8f\x8f\xc7\x28\xa1\xa8\x68\x19\x46\x83\x7e\x6f\x28\xd1\x26\x85\xb5\xf5\x90\x1e\x52\x25\x2d\xbe\xda\x21\x81\x7a\xc3\x5c\xa9\xbc\x44\x96\xab\x92\xcb\x9c\x29\x9d\xfb\x40\x49\x85\x96\x67\xdc\xf2\x80\xa2\xa5\x36\x13\x0c\x73\x61\x8b\xe5\x8c\xa5\xaa\x4a\x72\x75\xb6\x10\x36\xa1\xdf\x6e\x29\xe1\x60\xd3\x35\xd5\x25\x52\x1c\xf4\x7b\xf5\x0c\x86\xce\xb1\xc7\x2f\xb7\xbe\xbe\x47\x6e\x0b\x38\xdb\x6c\x86\x83\xfe\x38\xd2\x74\xc7\x17\xf8\xf5\xe9\xf1\x32\xf4\x02\x15\x5f\xa0\x01\x0e\x06\x2d\xa8\x39\xa0\xcc\x6a\x25\xa4\x35\xc0\x57\x5c\x94\x7c\x56\x22\x70\xda\xf7\x6c\x39\xc7\x62\x2a\x76\xcf\x2b\xdc\x6c\x5a\x42\xe6\x4b\x99\xbe\x09\x3d\xda\xc6\xba\x6e\xfe\x4d\x40\xd5\x56\x28\x69\x80\x31\xb6\xd3\x76\xe4\xf6\xc1\x6f\x8f\xa1\x9e\xb1\x77\x92\x81\x1b\xf4\x7b\xa6\x03\x36\x70\x7e\x01\xdf\x7f\xbc\x1f\x8d\x0e\xf4\x0e\x6d\x7f\xc1\xb9\xd2\x38\x6a\xc4\x98\xaa\xcb\xa0\xdd\x78\x32\xe8\xf7\x36\x7b\x69\x2e\x80\xd7\x35\xca\x6c\xb4\xb3\xdc\xb6\xc4\x18\x1b\x0f\xfa\x3d\x8d\x76\xa9\x25\xfc\x4e\x09\x43\x1a\x17\x94\x72\x0e\xa6\xea\x6f\xf5\x82\x1a\x76\x1a\x03\x32\x74\xcf\x39\xcd\x65\x8e\xf0\x49\x50\x3b\x2d\xe0\x0e\x6d\xa1\x32\xe3\x21\x3d\xe7\x9a\x00\x9f\x44\xe4\xe4\x1c\x76\x1b\xbb\xc7\x97\xc8\x3e\x1d\xe8\xb5\x12\x30\xe7\xda\x33\x8d\x1a\x13\x0f\xb9\xc2\x54\x65\x5e\xb6\x0e\xe4\x09\x9f\x97\x68\x22\xe2\x5a\x1e\x44\x98\x5a\x49\x83\x01\xb2\xc3\x08\x63\xcc\xaf\x7a\x1a\x9d\x3b\x23\x53\xf9\x06\x36\x83\xfe\x26\xba\x70\xcb\x0e\x88\xaa\x2e\xb1\x42\xf2\x09\x5d\x39\xe7\xbe\x2a\x4f\xcb\x61\xf5\x85\xb4\xa8\xe7\x9c\xcc\x6e\xd7\x35\x76\x03\x19\xab\x97\xa9\x25\x7f\x9c\x40\xe6\x01\x2e\x01\xde\x90\x79\xc3\x65\x56\xa2\xa6\x78\x6d\x13\x4d\x03\x31\x96\x9f\x26\x9d\x1a\xac\xda\xf6\xf3\x0b\xad\x7c\x5c\xb0\xbf\x60\x23\x03\x9f\xb7\xc9\xc6\xdb\x04\x6d\x0f\xa3\xd4\xbe\x42\x1c\x41\x2c\xda\x79\x02\x1a\x9f\xe1\xb3\xbf\x52\x5b\x7c\x94\x78\xba\xae\x9b\xb2\xc6\x30\xda\x07\x05\x95\x3b\xa8\x09\xa0\xd6\x8a\x92\x0f\xfa\xbd\x9f\x14\xbb\xf6\x4b\x54\x38\xd9\x6c\x8f\xd6\x70\xd9\xc8\x3e\x54\x9c\x2f\x86\xee\x89\x98\xfb\x53\xbf\x5d\x80\x14\xa5\x0f\xd6\x5c\x1d\x29\x4a\x1f\x31\x5e\xc2\xb8\xaa\xb1\x66\xa7\xd4\x37\x9e\x50\x00\x2f\x94\x73\x51\x34\xaf\x58\x64\x3d\xf8\xfd\x14\xca\x93\x04\x8e\x5d\x0e\x10\x34\x17\xdf\xbc\x21\xc2\x81\x88\xf8\x93\x34\xb3\x05\xb7\xa4\xc8\x0a\x35\x4d\xd5\xe0\xfe\x30\x4c\xf7\x1d\xa8\x63\x68\xab\x80\xc3\xd2\xa0\x3e\xcb\x54\xc5\x85\x3c\x06\x66\xf0\xa8\x45\xc5\xb5\x28\xd7\x74\x64\xbe\x2c\x41\x48\x3f\xd1\xbb\xb3\xf9\x58\x27\xa3\x9f\xfb\x96\xa1\x6e\x9e\xf0\x79\x6b\x52\x47\xfe\xe8\x3c\xed\xf8\x80\x0c\x76\x7e\xd1\x1c\x3a\xa4\xd3\x9e\xd9\xba\xca\x3e\x7f\xa0\x59\x98\x40\x27\x6a\x76\x74\x5c\x1d\x14\x2d\x9c\x68\x20\xef\xaa\xf6\xb1\x1e\x31\x87\x57\xef\x88\xc6\x75\xb9\x3e\x4d\xb4\xa3\xad\x1c\x52\xad\x2d\xe1\x54\xd9\x4c\x4d\x4c\x36\xc7\x4e\xbb\x60\x5d\xe5\x4c\xfd\x9e\x74\x37\x58\xd6\xa8\x0d\x3d\xf9\x5e\xf6\xde\xb2\x87\x47\x55\x95\xb5\x48\x76\x77\x35\x7e\x0b\xf0\x65\xd3\xcc\x5d\x4c\x60\xe5\x4b\xf7\x86\xa8\xb2\x30\x41\xc4\x1c\x56\x3b\x23\x25\x7c\x22\x21\x2c\x70\xed\xa5\xcf\x32\xfa\x80\x55\xb6\x20\xba\x9b\x44\x34\xc4\x2b\x6e\x61\xb4\x18\xc3\x4b\x21\xd2\xc2\x43\xcb\x12\x4a\x92\xae\x09\xc3\x65\xe6\x5f\x50\xf4\xa5\xc7\x2e\xb9\x54\x52\xa4\xbc\xbc\x41\x9e\xa1\xfe\x0b\xd7\xf4\xf5\x64\x63\x26\xa3\x82\x81\x84\x85\x94\x4b\x98\x61\x1b\x23\x4d\xd1\x18\xcc\x28\x3b\x0a\x5b\xa0\x8e\xb9\x3d\x80\x08\xb9\x68\x3b\xfe\x57\xd8\xe2\x1b\x2f\x97\x18\xc6\x26\x35\xfc\xfd\x8f\x1f\xe3\x8f\x91\xef\x14\x38\x5a\x8c\x3b\x21\xe2\xfb\x78\xab\x65\x6a\x5f\xbd\x8a\xff\x07\x00\x00\xff\xff\xde\xdb\x4e\x58\xf0\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3056, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x86, 0xa1, 0x23, 0x1f, 0x58, 0xd7, 0x34, 0xf1, 0x53, 0xb1, 0x6e, 0x3e, 0xc1, 0x64, 0x60, 0x4, 0x13, 0xf9, 0x2a, 0xee, 0xec, 0x12, 0x5c, 0x94, 0x40, 0x4d, 0x83, 0x38, 0xb5, 0x4b, 0x74}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate":    {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate":       {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
