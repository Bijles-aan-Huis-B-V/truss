// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (376B)
// NAME-service/handlers/handlers.gotemplate (63B)
// NAME-service/handlers/hooks.gotemplate (63B)
// NAME-service/handlers/middlewares.gotemplate (76B)
// NAME-service/svc/client/grpc/client.gotemplate (3.331kB)
// NAME-service/svc/client/http/client.gotemplate (107B)
// NAME-service/svc/endpoints.gotemplate (9.01kB)
// NAME-service/svc/server/run.gotemplate (3.392kB)
// NAME-service/svc/transport_grpc.gotemplate (3.056kB)
// NAME-service/svc/transport_http.gotemplate (108B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6e\xc3\x20\x18\x84\x67\x23\xf1\x0e\xa7\x4c\xce\x50\xb3\x77\x8d\x3b\x64\x69\xa2\x34\xed\x4e\xec\xc3\x46\x75\x70\x04\xd8\x51\x64\xf9\xdd\x2b\xec\xa8\xca\xc4\x7f\xdc\xc7\x1d\xa0\x14\x76\x7d\x4d\x34\x74\xf4\x3a\xb2\xc6\xe5\x81\xe8\x87\x10\x0a\x94\x07\x7c\x1e\xce\xf8\x28\xf7\xe7\x42\x0a\xa5\x70\xa2\x1f\x9c\xb3\xae\x59\x09\xdc\x6d\xd7\xa1\x1f\xe9\xef\xde\x46\x22\xb6\x36\xc0\xd8\x8e\x2b\xfd\x43\x1f\x6c\xef\xde\x31\x4d\xc5\x73\x9e\xe7\x57\x07\xa5\x8e\x7c\xb5\x93\x4e\x88\x14\x37\x5d\xfd\xea\x86\xb8\x6a\xeb\x92\xb6\xd7\x5b\xef\x23\x72\x29\xb2\x8d\xe9\x74\xb3\x49\x9b\x99\x52\x38\xa7\xce\x2f\xfa\xd1\x56\x4c\xe6\x34\x15\xfb\x85\x3d\xea\xd8\xe2\x6d\x9e\xa1\xc2\x58\xa9\x40\x3f\xd2\x6f\xa4\xd8\xa6\x83\x66\x70\xd5\x12\x9d\x6f\x31\xad\x39\xdf\xb7\x5a\x47\x42\xd7\xb5\x67\x08\x0c\xb0\x06\xb1\xe5\x03\xad\x1e\x89\x0b\xe9\xfe\x1f\x1a\xe9\xd2\x27\xa5\x6b\x04\x29\xb2\xb4\x16\x47\xed\x03\xf3\x25\x3c\x5b\xbb\x8a\xd3\xe0\xf2\xe7\x58\xd2\xe8\xa1\x8b\xbb\xde\x19\xdb\x6c\xa5\x98\xa5\xf8\x0b\x00\x00\xff\xff\x01\x9c\x46\x61\x78\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x17, 0x89, 0x8a, 0xaa, 0x99, 0xb2, 0x34, 0xd7, 0xec, 0xa8, 0x8f, 0x9a, 0x29, 0x93, 0x35, 0x8d, 0x2a, 0xd3, 0x33, 0x6e, 0x75, 0x6, 0x78, 0xd, 0x6a, 0xe9, 0xda, 0x80, 0xbd, 0x1c, 0x87}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xe0\x1d\xb2\x2e\x68\x0e\xe3\x09\x8a\xf9\xc6\x62\xdb\x48\x92\x61\x16\xa5\x77\x9f\xb7\x16\x17\x7a\x01\xa4\xf6\x48\x3f\x22\x58\x31\xd5\x7e\x2d\xf9\x5b\xa7\x74\x78\x70\x62\xfc\x7b\x4d\x04\x8f\x26\xd2\x71\x56\x47\x3c\xd5\xe8\x63\x4e\x6f\x13\x50\xe1\xbd\xef\xb7\x2b\x00\x00\xff\xff\xeb\xa6\xcc\x76\x4c\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xc8, 0x25, 0x5, 0xd9, 0x58, 0x94, 0xe2, 0x24, 0xe6, 0x20, 0x97, 0xcb, 0x5f, 0x27, 0x16, 0x26, 0x8f, 0x35, 0x28, 0xb6, 0x9c, 0xc7, 0xe2, 0xd5, 0x16, 0xe7, 0xae, 0xf7, 0x74, 0x21, 0x28}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xcd\x6e\xdb\x38\x10\x3e\xdb\x80\xdf\x61\xd6\x08\x16\x52\xa0\xd0\xf7\x2e\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xbd\xfb\x62\xf8\x63\x4b\xa9\xe3\xf6\x10\xc4\xe2\xfc\x7f\xdf\x0c\x87\xb3\x19\x2c\x74\x89\x50\xa1\x42\xc3\x1d\x96\xf0\x78\x00\x67\x76\xd6\x32\xb8\xfd\x04\x77\x9f\x1e\xe0\xdd\xed\x87\x07\x36\x19\xcf\x66\x70\x8f\x66\xa7\x94\x54\x55\xd0\x80\x27\x59\xd7\xa0\xf7\x68\x9e\x8c\x74\x08\x6e\x2d\x2d\xac\x64\x8d\x41\xfb\x0b\x1a\x2b\xb5\x7a\x03\x6d\xcb\xe2\xef\xae\xeb\x4b\xe0\x96\x3b\xec\x8b\xe9\x9b\x54\xbc\xd2\x92\x8b\x0d\xaf\x10\x2a\xd3\x08\x68\x8c\xde\xcb\x12\x2d\x70\xa8\xee\x97\x0b\x10\xb5\x44\xe5\x60\xa5\x0d\xb8\x35\x92\x8b\xcf\x68\xf6\x52\x20\xbb\xe3\x5b\xec\x3a\xb0\xf1\x73\x32\x6e\x7a\x7e\xc8\xb5\xdc\x36\xda\x38\xc8\x26\xe3\xd1\x54\x68\xe5\xf0\xd9\x4d\xe9\x77\xa5\x75\x55\x23\xab\x74\xcd\x55\xc5\xb4\xa9\x66\x64\x71\x41\x34\xdb\xa2\xe3\x25\x77\x3c\xe8\x48\xb7\xde\x3d\x32\xa1\xb7\xb3\x66\x53\xcd\xd0\x18\x6d\xec\x94\x02\x0e\x64\x95\xbe\xd9\x48\x37\xa3\x3f\x54\x65\xa3\xa5\xf2\xd1\xc9\x9f\x33\x5c\x59\x9f\xdb\x2b\x06\x47\x85\x94\xd9\x64\x3c\x9a\xcd\xe0\x81\x60\x8f\xe5\x53\xb4\xb6\x65\x1f\x7c\x8d\x4b\xee\xd6\x70\xd3\x75\x30\xb3\x7b\x5f\x48\xf3\x08\x24\x5d\xbe\x1d\xca\xa7\x93\x71\x1e\x41\xbf\xc3\x27\x30\xe8\x76\x46\x59\xe0\x2a\xa1\x08\x8f\x5c\x6c\x42\x6b\x0c\xf1\x17\x5a\x29\x14\x4e\x6a\xc5\xe0\x83\x03\x69\x89\x0d\xef\xc8\xa0\x6d\xb4\xb2\xf2\x51\xd6\xd2\x1d\x40\xaf\x3c\x4f\x82\xd7\x35\x1a\x70\x1a\x4a\xc9\xeb\x02\xb8\x2a\xa1\xe6\x0e\x0d\x88\x5a\x5b\x2c\x82\xd2\xc9\xe9\x64\xbc\xda\x29\x41\x59\x65\x74\x0a\xd7\x54\x38\x5b\xf8\xe0\x0b\xad\x54\x01\xba\x21\x45\x0b\x8c\xc5\xe3\x4f\xfe\x20\x87\xac\x79\x64\x3f\xb5\x05\x7d\xa1\x29\xc0\xb3\x93\x43\x3b\x19\x8f\xf6\xdc\x80\x10\xb1\xa0\x85\x56\x2b\x59\x79\x60\xa9\xb5\xbe\x17\xb0\x82\x37\x73\x30\x5c\x55\x78\x0c\x45\x56\x23\x34\x86\x24\xab\xec\x4f\x21\x72\x3a\x90\x2b\xf2\x0a\x7f\xcc\x41\xc9\x3a\xe8\x8c\x02\x92\x74\x10\x43\x5a\xf6\x9f\xe1\x4d\x86\xc6\x14\x30\x15\x5c\x29\xed\x80\x37\x4d\x7d\x88\xce\xa7\xde\x55\x37\x19\x8f\xfc\x14\x8c\x44\xaf\x24\x4b\xf1\xbe\x7e\x1b\x74\xca\xa0\x66\x1f\xf3\x9c\xf8\x2d\xae\xb4\xc1\xcc\xa7\x14\x3b\xfe\x0b\xaf\x77\x68\x1f\xf4\xfb\xfb\xe5\xe2\x63\x6c\xe3\x4c\x08\xb6\x46\x5e\xa2\xb1\x79\x5e\x84\x1c\x46\x6d\x7b\x03\x4f\xd2\xad\xe1\xca\x21\x25\xc0\x68\x3e\x47\xbd\xe3\x66\x53\x11\xb6\x24\xbb\x72\xc8\xe2\xd4\x06\xb8\x7d\x44\x52\x0d\x00\x5e\xc9\xa4\x95\x58\xf9\x88\x6e\xad\x4b\x1b\x35\x3d\x17\x6d\xfb\xa0\xff\xd5\x4f\x68\xe0\x4a\x46\xd6\xde\xc5\x41\x81\x34\x31\x2c\x9d\x04\xb3\x00\x36\x45\x7a\xdd\x74\x0e\x43\x64\xee\xf0\x29\x80\x93\x45\x63\x42\x46\x15\xe9\x63\xda\xb6\xa9\xb2\xae\x63\x6d\xdb\x4f\x3a\x1c\x4e\x07\xba\xf2\xa7\xd3\x77\x4a\xe8\x12\x09\xdf\x9e\xf8\x1e\x7f\xec\xd0\xba\xa3\xd2\x2d\x9e\x55\xf2\xa3\x83\x47\x2d\xdf\xc9\xef\xb5\x87\xf9\x4a\xb2\x24\x7f\x38\x34\x29\x99\xb6\x3b\x2a\x0f\x5a\x86\x31\x96\x04\xf9\x11\xb4\x2c\x0f\x47\x89\x1e\x54\x65\x22\x35\xfd\x3c\xfe\x9a\x8c\x47\x09\x74\xdf\x7f\x76\x2f\x08\xba\xe4\xca\x7a\x5f\x6d\xdb\xe7\xf7\x25\xb9\x74\xc3\xf8\x89\x49\x36\xac\x57\x6b\x8f\x9f\x0b\xec\xf5\x33\x4a\x43\x75\x74\x57\xd0\x7c\x4d\xc6\x69\x6d\x10\x98\x10\xa8\x85\x00\xef\x64\x7c\x39\xc1\xb8\x94\x2e\x72\x41\x57\x1b\x87\xe1\x05\xcc\x82\x45\x52\xf9\x9b\x6e\x2a\xb7\xe6\xfe\x56\xdc\xa3\x71\x16\xb8\x77\xec\x2f\xcc\x33\xd5\x81\x41\x9a\x7c\xa7\x81\xc3\xce\xa2\xb9\x29\xf5\x96\x4b\xf5\x8a\x6a\x08\xc2\x60\x69\xe4\x96\x1b\x59\x1f\xc8\x66\xb5\xab\x41\x2a\xe0\xf1\xfa\x4a\xf7\xe5\xc5\x52\xb2\xef\x10\x2f\x01\xb6\x08\xff\x0b\x3f\x1b\xf7\x3e\x1b\xa9\x1c\x9a\x15\x17\xd8\x76\x39\x64\xbd\xaf\xc1\xa5\x19\x32\x7f\x33\x3f\x19\xb2\xec\xfa\xd7\x6d\x9a\x9f\xe8\xf3\x1e\x4e\xd4\xf5\x1a\xee\x05\x87\x61\x8e\x7e\x93\xc3\x4b\x43\x77\x96\xc2\x60\x10\x35\x5e\x65\xf0\xd7\xec\x84\x08\x9e\xca\x0b\x74\x7b\xad\xdf\xa3\xf0\x52\x25\xe7\x18\x4c\x29\xfc\x2e\x7f\x3f\xfc\x5e\x8b\x19\x9d\xe1\xce\x0b\x5e\xa3\xee\xc7\x59\xe2\x26\x63\x77\x68\x70\xb0\x49\xc1\x3a\xb3\x13\xce\xc7\x8c\xab\x05\xbe\x7e\xb3\xce\x48\x55\x9d\x46\xb6\xbf\xc4\x02\x4b\x04\x81\xff\xf2\x6c\x6c\x75\x29\x57\x12\x6d\x78\x1d\x1c\x5f\x1e\x7e\x53\xfb\x90\x03\x07\x64\x9b\x5d\xf7\xb3\xc8\x43\xe9\x14\xcd\x63\xbb\x70\xcf\x69\xff\x7d\x46\x55\x66\x1b\x3c\xf8\x07\x44\xc8\x2b\x1f\xba\x6b\x4f\x85\x7b\xcf\x1a\xce\xf9\x0e\x0b\x5f\xa7\xfd\x09\x73\x20\xa7\x74\x76\x7a\x03\x84\x8d\xda\x1d\xd3\xb8\xb4\x8a\x7d\x4a\x09\xa9\x1c\xce\x6d\xf5\x7e\xd3\xbe\x4c\x52\xb8\xe7\x9f\x5b\x64\x5b\xc2\x75\x7a\xb2\xb2\x8f\xb7\xf9\x4b\x8d\x50\x03\xed\xe0\x86\xcb\x01\x51\xa3\xf4\x1a\xda\x9c\x5e\x43\x3e\xc3\xb0\x79\xe5\x0a\xf6\x05\x68\x2f\x14\xee\x99\xf9\x8a\xb2\x4d\xce\xb2\x98\xff\x5f\x24\x8c\x5b\x3a\xf8\x9e\xd3\xb3\x87\xb0\xf7\x9f\x05\x6c\x0a\xd8\x87\xb5\xd4\xc5\x17\x50\x7c\x53\x05\xf5\xc1\xab\xea\x7a\x5b\xc2\x1c\x8e\x95\xfc\xa3\xa5\xca\xae\xb7\x65\x71\x3a\x5a\x92\x51\x70\xcd\x18\xcb\xf3\x9e\xcb\x88\x92\x70\xcf\x47\x3a\xfe\x0f\x00\x00\xff\xff\xeb\xd5\x89\x8b\x03\x0d\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3331, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xe8, 0xd6, 0xe, 0x9a, 0x61, 0xd1, 0x60, 0x64, 0x8f, 0x1, 0x90, 0x10, 0x77, 0x50, 0xd4, 0x82, 0x57, 0xf0, 0xed, 0x7, 0xe7, 0x27, 0x26, 0xf1, 0xd9, 0xaa, 0x25, 0x59, 0x7, 0xf5, 0x8a}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x38\x12\xfe\x9c\x00\xf9\x0f\xb3\x46\x0f\xb5\x0a\x55\xde\xfb\x9a\x22\x1f\xee\xda\xec\xb6\xc0\xf5\x05\x9b\xde\xf5\x43\x51\x14\xb4\x34\xb6\x88\x48\xa4\x96\xa4\x9c\xf8\x0c\xff\xf7\xc3\xf0\x45\xa6\x2c\xf9\x25\xbb\xc0\xe2\xb0\xd8\x00\x85\x6d\x89\x1c\xce\x3c\xcf\x33\xc3\xa1\xd4\xd9\x0c\x5e\xcb\x02\x61\x89\x02\x15\x33\x58\xc0\x7c\x0d\x46\xb5\x5a\x67\xf0\xe6\x23\x7c\xf8\xf8\x19\x6e\xdf\xbc\xfb\x9c\x5d\x5d\xce\x66\xf0\x0b\xaa\x56\x08\x2e\x96\x6e\x04\x3c\xf0\xaa\x02\xb9\x42\xf5\xa0\xb8\x41\x30\x25\xd7\xb0\xe0\x15\xba\xd1\xff\x41\xa5\xb9\x14\xd7\xb0\xd9\x64\xfe\xfb\x76\x1b\xdf\x81\x37\xcc\x60\x7c\x9b\x7e\xd3\x90\xab\xcb\x86\xe5\xf7\x6c\x89\xa0\x57\x39\xfd\x9c\xcd\xe0\x73\x30\x0e\xb9\x14\x86\x71\xa1\xa1\x46\x53\xca\x42\x83\x91\x50\xb3\x7b\x04\x2e\x0a\xbe\xe2\x45\xcb\x2a\x40\x51\x34\x92\x0b\xa3\x61\xa1\x64\x0d\x1a\xd5\x8a\xe7\xa8\x53\x6b\x4a\xe1\xaf\x2d\x6a\x03\x4c\x14\xa0\x50\x37\x52\x68\x04\xb3\x6e\xd0\x9a\xa2\xb1\x14\x8b\xd4\xb8\x33\x93\x02\xd3\xf0\x80\x55\x45\x9f\x28\x72\x59\xa0\xd2\x64\xc0\x1a\x2c\xd0\x5f\x58\x48\xe5\x67\x5a\x73\xa9\xbd\xc0\x08\xa4\x05\xc8\x56\x81\x6e\x9b\x46\x2a\x42\xd9\x28\x26\x34\x7d\xa7\xf5\x38\xab\xf8\x7f\x99\xe1\x52\x58\x73\x0b\xa9\x6a\x66\x74\x46\x91\xf3\xda\x0e\x9a\x5e\x5d\x5e\x4c\x16\xb5\x99\xd0\x27\x01\x80\x8f\xee\xbb\x40\x33\x2b\x8d\x69\xe8\x07\x7d\xee\xec\x4e\x96\xdc\x94\xed\x3c\xcb\x65\x3d\x5b\xca\x97\xf7\xdc\xcc\xe8\x5f\x37\x20\x4c\x23\x2b\xe3\x43\x43\xf4\x6e\x50\x33\x87\xc9\x66\x93\x7d\xfa\xe7\x3b\xeb\xd2\x27\x66\x4a\x78\xb9\xdd\x4e\xae\x2e\x13\x4f\xd1\x6d\x07\x7a\x2e\xab\x0a\x73\xa3\x43\xec\xa6\x8c\xb0\x04\x53\x32\x03\xb9\xac\x1b\x02\x8a\x09\x60\x45\x11\x18\xca\xe0\x9d\x79\xae\xad\xb5\x1a\x99\x30\x44\xc8\x1c\xa1\xd5\x58\x10\xf2\x0c\x4a\xac\x1a\x54\xa0\x8d\x6a\x73\x93\xd2\x6d\xbf\xd6\xf8\x52\x5c\x18\x09\xcc\xda\xd3\x5c\x2c\x2b\x84\x86\x29\x56\xa3\x41\x65\x45\x6a\xef\xbc\x13\xc0\x1c\xed\x2a\x05\x6e\x9e\x6b\x5a\x6f\xd1\x56\x96\xbd\x45\x2b\x72\x62\xc6\xbb\x2d\x90\xc8\x93\x20\x1b\x9b\x2e\x20\x69\x6e\x83\xea\x65\x58\xd3\x5a\x9c\x33\xcd\x75\x06\x3f\x49\x05\xf8\xc8\xea\xa6\xc2\x14\xd6\xb2\x85\x9a\x2f\x4b\x03\x0d\xd3\xa4\x9d\x08\x2f\x72\xb2\x5b\xc9\x2d\xd4\x28\x59\xb4\x39\x3a\x2c\x98\x00\x62\x2b\x7b\xcb\x44\x51\x91\x97\x0f\xdc\x94\x80\x2c\x2f\x7d\x12\xc0\x34\xac\x9f\xc0\x03\x57\x58\x40\xdb\x38\xab\xba\xc1\x9c\x2f\x78\x0e\x0d\x33\x65\x06\xd3\x77\xce\x43\xae\x69\x85\x39\x9b\x57\x6b\x60\x50\x73\x6d\x5c\x06\x41\x81\x9a\x2f\x05\xcd\xe5\x62\x25\xef\xd1\x02\x7a\xe7\xd8\xe9\x32\xce\x3a\x89\x7b\xa4\x3b\x4e\xc8\x46\x40\x33\x4b\xfa\x18\xe7\x15\x47\x61\xfa\x18\x47\x0c\xee\xf2\xb7\x5a\x53\x96\x3b\x83\x58\x1c\xe5\x93\x12\xcd\x21\xc6\x09\xe7\x1a\x9d\xc2\x76\x3e\x73\x61\x50\x2d\x18\x69\x6b\x9c\x0f\x6b\xad\x5b\x6e\xbc\x8a\xb4\xda\x55\xbd\x38\x77\xb2\x0f\xf8\xf0\xda\x47\x94\xcb\x7a\xce\x85\x05\xab\xf6\x4e\x46\xfc\xa6\xbe\xd4\x98\x56\x09\xe0\x56\xd4\xe4\x61\xce\xaa\x0a\x95\xd3\xb5\xf7\x36\xbb\xba\xb4\x01\x0d\x50\xdd\xf8\xfc\xbe\xb3\xc0\x7e\x6c\x9c\x24\x01\xa0\x66\xcd\x57\x6d\x14\x17\xcb\x6f\x5f\xbf\xf5\x2a\x40\x16\x8f\xf5\xd3\x7f\x71\xa5\xef\x4d\x28\x58\xf1\xf4\xfe\x64\x37\xc4\x8f\xff\xa9\x15\x79\x67\xc1\x15\xcc\xdb\x50\x04\x0f\x5a\x70\x23\xc2\xf8\xc8\x84\x57\x31\x5d\xb1\x21\xc4\x26\x28\x09\xa6\x16\xdd\x30\xf1\x0b\xed\x2d\x2a\x85\x17\xfe\xaa\x75\x28\xb9\xba\xdc\x6c\x14\x13\x4b\x84\x67\x1c\xae\x6f\x20\x0b\x00\xbe\x77\x12\xa5\x6d\xe4\x62\xb3\x79\xc6\xb3\x0f\xac\xc6\xed\x36\x00\x4a\xcb\x05\x5a\xb3\xdb\x2e\x67\x37\x9b\x97\x74\x99\x66\xd9\xfd\x87\xdc\x80\x0f\xf8\xd0\xf1\x30\x4d\x22\x4e\x88\x0c\xcf\x66\x77\x91\xae\x0d\x19\xba\x76\xe1\xdd\xe3\xf4\x4c\x9e\x92\x34\xd8\xd9\xa3\xea\x7a\x68\xe7\x04\x61\xb1\xa9\x3e\x67\xd7\x27\x4c\x0d\x99\xdb\xd9\x8a\xc9\xbb\x86\xb1\xf0\xce\xa5\xd0\xda\x0c\x80\xc7\x95\xe4\x2c\x6e\x2d\x43\xd3\x28\x53\x12\x88\xe8\x9e\xe6\xe6\x11\xfc\x3e\x99\xbd\x76\x9f\x29\x95\xa6\x17\xcd\x3c\xdb\x6c\x7e\x96\x34\x0c\x9e\xf1\xe0\xcc\xe7\x75\x83\x7e\x6a\x02\xd3\xe1\x20\x17\x47\x34\x2a\x05\x54\x4a\xaa\xc4\x6a\xe1\x22\x74\x11\xf6\x2a\xb9\x8c\xd9\x88\xf6\xc8\x29\x72\x22\xa1\x29\x7c\x61\xc7\xfe\x70\x03\x82\x57\xce\x4a\xd0\x94\xe0\x95\x35\x44\xd7\xb6\xce\xbc\xbd\x1e\x56\xc9\xce\x71\x30\x49\xc9\x8e\x43\x78\xb3\xf1\xda\xb6\x38\xbf\xa7\x4a\xdf\x03\xdb\xee\x26\xcf\x0c\x5a\xb0\x7d\xe6\xc4\x04\x3c\x33\x38\xca\x81\x23\x81\xec\x8d\x45\xab\xc1\x7a\x19\x4f\x76\x23\x9c\xde\x93\x61\x1e\xf6\x61\xb0\x3a\x1a\xe5\x31\x34\x70\x5d\x69\xdf\x10\x6b\x5d\x2b\x17\x5d\x76\x84\xc4\x54\x91\xf9\x5f\x29\x28\x6f\x64\x0c\xcc\x81\x24\xdc\xc4\x55\x47\xaf\xce\xf6\xb4\x66\x7d\xf2\xc3\xc6\x98\x1d\xe5\xd6\xb3\xdb\xdd\x5b\x05\xca\xfc\x0d\x47\x84\xa7\xae\xcf\xe1\x17\xc5\x9a\x7f\x54\xd5\xed\x63\x8e\x8d\x81\x07\xc5\x1a\xed\xda\x81\x0e\xca\x05\xc7\xaa\xa0\x86\xc8\x6f\x20\xbb\xea\x65\xd9\x76\x7b\xe8\x48\xb3\x97\xbd\xe7\x45\x51\xe1\x03\x53\xbe\x8d\xff\xb7\x0e\x9d\x3d\xf5\xb2\x4d\x53\xad\x69\x2b\xa4\x2d\xde\x90\xf9\xba\x1b\x6e\xdb\x18\x5c\xa1\x5a\x77\xcc\x52\xc6\xd1\x4e\xa7\xbb\xdd\x6d\x36\x03\x57\xe8\x68\x93\x4f\xa3\x1d\x36\x67\x82\x3a\x3d\xea\x8d\xb0\xa0\x79\xf3\x35\x08\x62\xc4\x75\x80\xf8\x98\x57\x6d\x81\x85\xeb\xe7\xe7\x48\x3e\x50\xd8\x0d\x16\xd9\x10\x91\xe9\xce\xab\x14\x26\x77\x86\x99\x56\x4f\x52\x98\x7c\xe2\x62\x39\x49\x7c\x79\x9f\x22\xbc\x88\xaa\xc7\x21\x03\x30\x82\x4c\xba\xf3\x27\xcb\x32\x57\xf7\x9c\xbe\xb8\xf0\xd7\xaf\x6f\xe2\x6d\xcd\x91\xb0\xd9\x5a\x35\xd0\x66\x73\xb2\xbe\x5d\x5c\x4c\x22\x8d\x4d\xae\x61\xb3\x4d\xc3\x64\xaf\x84\x0b\xab\x86\x0b\xe2\xe5\x3b\x79\x64\x55\x6d\xed\x76\xde\x6d\x7c\xa9\xf9\x9e\x82\xbc\xa7\xfb\xc1\xbf\xaf\xf8\xf8\xed\x15\xfc\x20\xef\xbd\x40\x1b\x26\x78\x3e\x5d\xd4\x26\xbb\x6b\x14\x17\x66\x31\x9d\xdc\x06\x23\x1d\x9b\xcf\xff\xa6\x9f\x43\x21\x51\x83\x90\x06\xf0\x91\x6b\xf3\x0a\x34\x62\x2c\x82\x4e\x48\x3a\x5b\xca\x09\xb9\x95\x24\x5d\x21\x2b\xb0\x42\x83\xd3\xe0\x84\xbd\xdb\x8b\x83\x8b\x7c\x17\x45\x87\xe5\x53\x50\xe3\x0b\x6b\xe4\xe6\x06\x7a\xf8\x85\x3c\x1c\x2d\xcc\x70\x13\x45\x30\x1d\x1d\x92\xec\xd2\x72\x8f\x81\x90\x92\xff\x62\x73\xac\xb0\xd8\x89\xc4\x1d\x8f\x97\x68\x82\xa8\xe3\xa3\x89\xd3\xf6\x43\x89\xa2\xbb\x2b\x63\x1d\x7b\x6b\x4e\x8d\xa9\x4b\x40\x9f\x22\xad\x1b\x0d\xee\xd0\xcd\xdc\xd1\x9d\xe7\xd4\x9c\x2b\x9e\xfb\xc3\x53\xe4\x45\xc9\xf3\xd2\xce\xd5\x28\xc6\x9c\xf0\xdd\xa8\x9f\x1e\xba\x71\xa9\x42\x2f\x3a\x0c\xcc\x56\x66\xa7\xec\x74\x58\xc5\x47\x0a\x7b\xbf\x6a\xf5\x62\xfb\xed\xc5\x6b\xe0\x57\xea\x63\xb5\xb8\x2b\xcc\x91\xaf\xdc\xf1\xc5\x86\xb9\x77\x36\xcc\xe0\x0e\x71\x67\x27\x32\x63\xef\x84\x73\x55\x57\x15\xc8\x55\x52\x68\x81\x86\xf1\xca\x1e\x81\x42\x96\xb9\x43\xbb\x3f\xbd\xb1\x8a\x9b\x75\x76\xb4\xc4\xf4\xe2\x8f\x2b\xcd\x93\x71\xfd\xab\x0e\xfd\x89\xeb\x50\x6f\x5e\x3a\xde\x52\x9e\x2e\x4b\x5e\x73\x5f\xb8\x29\xdf\x1a\xd3\xb8\xcd\xf7\x48\xea\xa1\x30\x6a\x4d\xc9\xb2\xe0\x15\x16\xf0\x76\x70\xe6\x3c\x91\x95\x87\x8f\x36\x67\xb5\x13\xee\xc1\x01\x48\xbf\xd8\xff\x41\x47\x31\x86\xdc\x54\x47\x71\x3d\xb5\xc3\x38\x69\xf0\x08\x86\x7f\x25\xfc\x1f\x9f\xf0\x2b\xb6\xd3\xe3\x89\x47\x2c\x14\xb1\x0c\x11\x63\x36\x78\x1c\xf0\x95\x8b\xfc\xdb\x2b\xe8\x82\x0f\x66\x6f\x28\x13\x50\x14\x53\x99\x42\xac\x04\x17\x00\x60\xa5\x71\x30\xc3\x1e\xbb\x8f\xf9\x93\xc2\xdf\x93\x78\xce\xd7\x1f\xbf\xc1\x4d\xcf\x7c\x07\xcf\x21\x57\xe1\x26\x44\x3e\x2c\x2a\x7d\x19\xfb\x5a\x22\x05\xfe\x71\xa5\x64\xe8\xc5\x81\xbc\x3c\x92\x8f\x7b\xf3\x3b\xc5\x85\x5d\xf8\xcc\xbc\xb4\x39\x08\x00\x70\xbe\x58\x68\xf4\x29\xb9\x04\x77\x3a\xcd\x80\xff\x3b\x43\x38\x34\x6c\x27\x9d\xe1\xc4\x63\xde\x45\x13\xe8\xaf\x87\xea\xee\xd6\xd6\x2f\xe2\x3e\x8e\xfa\x1f\x0b\x29\x88\xe8\x67\x34\x43\x49\xb8\xa3\xb0\x7b\x71\x70\xd8\x3f\x60\x5a\xcb\x9c\xdb\xf7\x55\x56\x30\xb4\x25\x2c\xf9\x0a\xc5\xae\x47\xda\x71\x1e\x51\x3e\xb6\xe6\x3e\xe9\xc9\x51\x68\x5c\xb1\x5d\x84\x70\x9e\xc4\x5e\x77\xd2\xef\x25\x55\xb8\x78\x46\x42\xff\x98\xec\xe0\xbb\x73\xa1\xf4\x1f\x13\x12\x30\x7c\x29\xec\x9b\x92\xe3\x4f\x07\xc1\x3d\xa3\x3e\x0e\xd7\xe8\x1a\xc3\x24\xf1\xef\xbf\x4e\x2d\xe9\x36\x2a\x87\xd4\xde\xd3\xcd\x9e\x52\xbc\xb9\x81\x52\xf6\x42\x0d\x52\x21\xee\x4f\x05\xfb\x3b\xf5\x72\x0a\x80\x05\xab\xaa\x39\xcb\xef\x4f\x23\x70\xca\x51\xaf\x2e\x0f\x41\x5f\x5d\x07\x31\x1b\xe8\xab\x43\x30\xd6\x57\x70\x72\x44\x42\xbd\xc7\xc3\x07\x35\x34\x7c\x2c\xfc\x34\x11\xf5\x56\x19\x82\xe8\x5f\xab\x9e\x5c\xb4\x2f\xa3\xfe\x93\xed\x9e\x8e\xbc\xc1\x11\x1d\xf5\xe3\x3d\x2c\xa4\x91\x88\x7f\xb7\x92\x4e\xa0\x70\x40\x4a\x63\x30\x9c\xf4\xd5\x8b\xc9\xe3\xb0\x2f\xa6\x43\xc8\x0d\xd4\xd4\xe1\x78\x96\x9a\xa2\x17\x04\x91\x92\xf2\x56\x1b\x59\x5b\x97\x21\x1e\xd1\x17\x10\x70\xa1\x0d\x32\x7b\xf4\xf7\xaf\xdc\x4a\x84\x02\x17\xac\xad\x0c\x35\x17\x47\x15\x16\xd9\x1d\xe2\x5a\xba\x9b\x70\xf6\xdb\x89\x48\x65\xf1\x3b\x8f\x9e\xc2\xbc\xd1\x81\xc2\xe2\x08\xf7\xd5\xd5\x0b\xdf\xfd\x87\x81\x27\x29\xe8\x48\x94\xc9\xd9\xd1\x05\x69\x94\xe1\x85\x72\x2c\x8d\xf1\x70\x07\xb2\xe8\x82\x8f\x65\x61\x1f\x60\x07\x34\xde\x32\xbd\x8f\x46\x5e\x62\x7e\xaf\xa9\xf1\x39\xac\x09\xae\x7f\x73\x96\x0d\x57\x1c\x62\x34\x97\xd2\x3d\x96\xff\x7e\x4e\xd8\xbb\xd0\xa4\xd3\xfa\xff\x02\x00\x00\xff\xff\xd0\x9a\xb5\x7d\x32\x23\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 9010, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0x4e, 0x28, 0xbe, 0xaf, 0xc3, 0xf9, 0x33, 0x26, 0x9a, 0x1b, 0xda, 0xb, 0x90, 0x37, 0x55, 0x1b, 0x9f, 0x29, 0x45, 0x3e, 0x32, 0x92, 0x7d, 0x58, 0x11, 0x9a, 0x58, 0xa8, 0xd, 0xff, 0x77}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5f\x6f\xdb\x36\x10\x7f\x96\x01\x7f\x87\xab\xd0\x0d\x32\xe0\x52\x05\xb6\xee\x21\xab\x1f\xda\x38\x6d\x03\x34\xa9\xe1\xb8\xdd\xe3\xc0\x48\x27\x99\xa8\x44\x6a\x24\x25\x37\x10\xfc\xdd\x87\x23\x25\x59\xf6\x12\xb7\x5d\x1e\x62\x89\xbc\xfb\xdd\xef\xfe\x2b\x8e\xe1\x52\xa5\x08\x39\x4a\xd4\xdc\x62\x0a\xf7\x0f\x60\x75\x6d\x0c\x83\xe5\x27\xb8\xfd\xb4\x81\xab\xe5\xf5\x86\x4d\x27\x71\x0c\x6b\xd4\xb5\x94\x42\xe6\x5e\x02\x76\xa2\x28\x40\x35\xa8\x77\x5a\x58\x04\xbb\x15\x06\x32\x51\xa0\x97\xfe\x82\xda\x08\x25\x2f\xa0\x6d\x59\xf7\xbc\xdf\x8f\x6f\x60\xc9\x2d\x8e\xaf\xe9\x9d\x44\xa6\x93\x8a\x27\x5f\x79\x8e\x60\x50\x37\xa8\xe9\x44\x94\x95\xd2\x16\xa2\xe9\x04\xba\xbf\x30\x2b\x78\x1e\x8e\xde\x95\x19\xbf\x65\xa5\x0d\xa7\x93\x20\x2c\x54\xee\x7e\x25\xda\xfe\x37\xde\x5a\x5b\x1d\xbd\xc4\x55\xa5\x55\x16\x92\xa1\x20\x8e\xe1\xb7\x14\x56\x5c\xdb\x07\x12\xc9\x95\xca\x0b\x64\xb9\x2a\xb8\xcc\x99\xd2\x79\x9c\xeb\x2a\x19\x44\x37\xe4\xf4\x1d\xea\x46\x24\x38\x9d\x04\xd5\x3d\x84\x6d\xcb\x56\x6f\xaf\x1d\xdf\x15\xb7\x5b\x78\xb1\xdf\x3b\x63\x6d\xcb\x8e\x4f\x21\x36\x4d\xf2\xd4\xd5\x96\xcb\xb4\x40\x4d\x3e\xcd\xc8\x58\xc3\x35\x2c\x31\xe3\x75\x61\x2f\x95\xcc\x44\x0e\xfe\x87\xee\xb2\x5a\x26\x20\xa4\xb0\xd1\x0c\xda\xe9\x24\xa0\xc8\xb0\x3b\xab\x85\xcc\xbf\x70\x1d\xfd\x7a\xa4\xc7\x96\x78\x5f\xe7\x6f\xd2\x54\xcf\x21\x4c\xe9\x99\xf1\x34\xd5\xe1\x1c\xc2\x8b\x57\x2f\xff\x78\x49\x0f\x4e\x04\xb8\x4c\xa1\x44\xab\x45\x62\xa0\x10\xc6\xa2\x04\x92\x44\x63\xc2\xd9\x77\xad\x7c\xd8\x6c\x56\x9d\x11\x8a\xf0\xd8\xc6\x2b\x67\x83\x04\x7e\x1e\xf6\xfd\x7a\x75\xd9\xc1\x52\x1e\xc6\xb0\xbf\x3b\xd8\x7c\xbd\xba\x84\x88\xc0\x67\x8f\xa0\xfb\xa4\x7d\x36\x08\x28\x1b\xa1\x95\x2c\x51\x5a\x68\xb8\x16\xfc\xbe\x40\x33\x07\x91\x81\x41\xcb\xe0\x5d\xc1\x73\x03\x5b\xde\x20\x54\x5a\x28\x2d\xec\x83\x2b\x75\xb8\x92\x0d\xc9\x1b\x36\x9d\x04\x22\x73\xd8\x70\xb1\x00\x65\xd8\x7b\xb4\x28\x9b\x28\x5c\x5e\xbd\xfd\xfc\xfe\xef\x37\xcb\xe5\x3a\x9c\xfd\xe9\x05\x9e\x2d\x20\x0c\x5d\x6a\x82\x27\x72\x01\x0b\x27\x39\x9d\x04\x7b\x0f\xec\xca\xfd\x18\x78\xf5\x69\xbd\x21\x48\x77\xf5\x24\x64\x1f\x78\x58\x40\x56\x5a\x76\x57\x69\x21\x6d\x16\x85\x17\xbf\x98\x70\xee\x74\x67\x07\x2b\x8f\xd0\x27\xfd\x1f\x64\x3f\x32\x75\x4c\xfe\x11\x58\x4a\xdc\x0f\xc2\xf6\x39\x3e\x82\x75\x73\xc1\x8d\x2b\x57\xfc\x89\x92\x96\x0b\x69\xc0\x6e\x11\x34\xfe\x53\x0b\x8d\x29\x64\x02\x8b\xd4\x40\xa6\x34\xf4\xa3\x8a\x0f\x43\xc4\x3e\x54\xd8\xab\x1b\xab\xeb\xc4\x3a\xe3\x83\x13\xc6\xd5\xdc\x74\x12\x1c\x92\x32\x1c\x0d\x94\xfa\x93\xfd\xd0\x77\xb7\xb8\xbb\x92\x69\xa5\x84\xb4\x26\x32\x7e\x12\x40\x75\xcf\xda\x96\x75\x73\x81\xdd\xf2\x12\xf7\xfb\x3b\xc7\x63\x06\xa6\x49\xd8\xa0\xe1\x28\xc4\x31\xbc\xad\x8d\x90\x68\x0c\xa4\xaa\xe4\x42\xb2\xbe\x54\xff\xd2\xbc\xea\xe7\x0b\xec\x84\xdd\x42\x29\xd2\xb4\xc0\x1d\xd7\x68\x18\xdc\x21\x42\x3f\x29\xe2\xf1\x4d\xae\xa6\x93\xa0\x67\xb3\x18\x64\x18\xe1\x75\x70\x3d\xd9\xa1\x2d\x7a\x52\x07\x0e\x01\x4d\x9d\x68\x3a\x09\xda\x56\x73\x99\x23\x3c\x17\x94\xd6\xc1\xb1\x1b\xb4\x5b\x95\x1a\x9a\x58\x94\xc6\xb6\xdd\xa8\x8f\x6a\x87\x1a\x9e\x8b\xce\xe9\x01\x73\xe1\xfc\xbe\xe1\x5f\xb1\x6d\xff\x73\x3b\xa2\x12\xb4\x2d\xca\xd4\xe1\x79\x62\x38\x84\xea\xc2\x63\x1c\x05\x7c\xf6\xc3\xe4\x06\x1c\xf6\x08\x01\x58\xc0\x19\xf2\x63\x56\xa3\xb4\x18\x2c\x30\xa1\x9d\x79\xc8\xe6\xcf\x66\xe8\xe0\xdc\x49\x8e\x0e\x1e\x0e\x22\x3e\x1c\x1a\x6d\xad\x25\x0c\xa7\x87\xce\x58\xd7\x12\x8c\xe5\xda\x1a\xe0\x20\x71\x07\x34\x77\xbb\xea\x9f\x83\x9b\x8b\xfd\x0b\x4d\x76\x0e\x6e\xf8\x77\x67\x9e\xb9\xdd\xa2\x83\xaa\xb8\x31\x98\x52\x93\x51\xb3\x90\x74\xa1\xf2\x9c\x9a\xc8\x95\xfc\xba\x96\x51\x92\xf5\x1b\xc8\xef\x9c\xbe\xd6\x2e\x46\x8e\xdc\xe2\xae\xaf\xb5\xd9\x69\x26\x1f\x6b\x9b\xa1\x12\x6f\x30\xd9\x72\x29\x12\x5e\x8c\x6a\x11\xb5\x4e\x48\xb3\xe4\x5f\x31\xa2\x7b\x40\xad\x95\x1e\x94\xae\xa5\x45\xad\xeb\xca\xf6\x04\x48\x29\x57\x07\x3a\x83\xc0\x07\x7f\x12\x11\xe2\xa0\xee\x77\x9e\x5f\x19\x83\x2e\xb9\xdb\x2d\xd5\xa0\x50\x39\x5b\xd1\x30\x2d\x64\x14\x5a\xcd\xa5\xa1\x61\x1a\xf6\x5b\x94\x1e\xba\x6d\x94\x64\xa3\xc9\xee\x0d\x04\xa5\x8b\x0c\x6d\xc2\x2e\x2a\x78\x53\x7f\x73\x61\x09\x4a\xe6\x09\x45\x61\xec\x90\xfc\xd7\x48\x1c\xce\xbd\x7c\xc7\xf6\x1d\x51\x71\x37\xec\x5a\xa6\xf8\x6d\x76\x4e\x37\x29\xd3\x42\x48\x7c\x1a\xe2\xd2\x0b\x9c\x05\xa1\x7f\xa2\x38\x03\xb2\xf2\x02\x67\x41\xcc\x43\x79\xaf\x8a\xa7\x31\xee\xdc\xfd\x59\x08\xab\x79\x72\x86\xc5\x86\xae\x67\x5d\x98\x5d\x91\xbc\x7e\xe1\x65\x3f\xba\x64\xbe\x91\xa9\x8b\x77\x74\x94\x96\x39\x94\x6e\x0f\x46\x43\x01\xb8\x0f\x92\x21\xaf\x3f\x55\x00\xa4\x7a\x92\xff\x7e\xad\x38\xc7\xb6\xfd\xec\xa2\xf9\x47\x37\x43\x05\x8e\x9a\xfb\xfb\xe4\x0f\xdf\x54\xdb\x13\xee\xae\xbb\xff\x1f\x77\x52\x0d\xe7\x63\xea\xfd\xb2\x73\x9c\x0a\x39\xa7\x3e\x23\x07\x24\xda\x8e\x55\x14\xda\xa4\x7a\x4c\x5a\x64\x4e\xf8\xd9\x02\xa4\x28\xbc\xe5\xc1\x2b\xd4\xda\xbd\xfb\x09\x46\x8f\x7e\x9c\x06\x46\x37\xe3\xf8\x10\xa0\xdf\x95\x27\xe1\x71\x73\xc3\x7d\xf5\xf5\x2d\xa4\x7d\x03\x55\xf7\x6c\x8d\x39\x31\xd3\x4f\x6c\xdd\xc8\xcc\xc1\xe8\xe6\xa4\x48\x0c\xf3\xb1\x2d\xe4\x49\x38\xd7\xb5\x7c\x36\x9d\x1c\x07\x0d\xbf\x09\x8a\xd7\xeb\x17\xdd\xd4\x70\xe4\xff\x0d\x00\x00\xff\xff\xb4\x2b\x79\x84\x40\x0d\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3392, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xfc, 0x1b, 0xa4, 0xf4, 0xa5, 0x43, 0xe7, 0xae, 0xb1, 0x83, 0x5a, 0x5b, 0xcb, 0xd9, 0x37, 0x73, 0xc, 0x3c, 0x6c, 0xfc, 0xb5, 0x87, 0xfb, 0xc4, 0x8f, 0xf9, 0x21, 0x15, 0xda, 0x5, 0xa6}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xe2\x38\x14\x7d\x06\x89\xff\x70\x17\x8d\x56\x30\xa2\xce\x3e\x57\xea\xcb\xb4\xdd\x69\xb5\xdb\x0f\x75\xd1\xec\xc3\x68\x34\x32\xc9\x25\xb1\x48\xec\xd4\x36\xb4\xac\xc5\x7f\x5f\x5d\xdb\x09\xa1\x50\xca\x3c\x20\x11\xfb\xf8\x7e\x9c\x73\x7c\x93\x24\x81\x4b\x95\x21\xe4\x28\x51\x73\x8b\x19\xcc\xd6\x60\xf5\xd2\x18\x06\x57\x0f\x70\xff\x30\x85\xeb\xab\xdb\x29\x1b\xf4\x93\x04\x9e\x50\x2f\xa5\x14\x32\x0f\x08\x78\x11\x65\x09\x6a\x85\xfa\x45\x0b\x8b\x60\x0b\x61\x60\x2e\x4a\x0c\xe8\x6f\xa8\x8d\x50\xf2\x1c\x9c\x63\xf1\xff\x66\xd3\xdd\x81\x2b\x6e\xb1\xbb\x4d\xcf\x04\x19\xf4\x6b\x9e\x2e\x78\x8e\x60\x56\x29\x3d\x26\x09\x4c\x9b\xe0\x50\x6b\xb5\x12\x19\x1a\x30\xa8\x57\xa8\xcf\x8c\xc8\x10\x66\x42\x66\x42\xe6\x06\xe6\x4a\x83\x2d\x10\xf2\xa7\xc7\x4b\xb0\x9a\x4b\x53\x2b\x6d\x43\x45\xb7\x16\x96\x56\x94\xe2\x3f\x34\x1e\xd3\x6e\x27\xb9\xae\x53\xf6\x8f\x8f\xc7\x28\xa1\xa8\x68\x19\x46\x83\x7e\x6f\x28\xd1\x26\x85\xb5\xf5\x90\x1e\x52\x25\x2d\xbe\xda\x21\x81\x7a\xc3\x5c\xa9\xbc\x44\x96\xab\x92\xcb\x9c\x29\x9d\xfb\x40\x49\x85\x96\x67\xdc\xf2\x80\xa2\xa5\x36\x13\x0c\x73\x61\x8b\xe5\x8c\xa5\xaa\x4a\x72\x75\xb6\x10\x36\xa1\xdf\x6e\x29\xe1\x60\xd3\x35\xd5\x25\x52\x1c\xf4\x7b\xf5\x0c\x86\xce\xb1\xc7\x2f\xb7\xbe\xbe\x47\x6e\x0b\x38\xdb\x6c\x86\x83\xfe\x38\xd2\x74\xc7\x17\xf8\xf5\xe9\xf1\x32\xf4\x02\x15\x5f\xa0\x01\x0e\x06\x2d\xa8\x39\xa0\xcc\x6a\x25\xa4\x35\xc0\x57\x5c\x94\x7c\x56\x22\x70\xda\xf7\x6c\x39\xc7\x62\x2a\x76\xcf\x2b\xdc\x6c\x5a\x42\xe6\x4b\x99\xbe\x09\x3d\xda\xc6\xba\x6e\xfe\x4d\x40\xd5\x56\x28\x69\x80\x31\xb6\xd3\x76\xe4\xf6\xc1\x6f\x8f\xa1\x9e\xb1\x77\x92\x81\x1b\xf4\x7b\xa6\x03\x36\x70\x7e\x01\xdf\x7f\xbc\x1f\x8d\x0e\xf4\x0e\x6d\x7f\xc1\xb9\xd2\x38\x6a\xc4\x98\xaa\xcb\xa0\xdd\x78\x32\xe8\xf7\x36\x7b\x69\x2e\x80\xd7\x35\xca\x6c\xb4\xb3\xdc\xb6\xc4\x18\x1b\x0f\xfa\x3d\x8d\x76\xa9\x25\xfc\x4e\x09\x43\x1a\x17\x94\x72\x0e\xa6\xea\x6f\xf5\x82\x1a\x76\x1a\x03\x32\x74\xcf\x39\xcd\x65\x8e\xf0\x49\x50\x3b\x2d\xe0\x0e\x6d\xa1\x32\xe3\x21\x3d\xe7\x9a\x00\x9f\x44\xe4\xe4\x1c\x76\x1b\xbb\xc7\x97\xc8\x3e\x1d\xe8\xb5\x12\x30\xe7\xda\x33\x8d\x1a\x13\x0f\xb9\xc2\x54\x65\x5e\xb6\x0e\xe4\x09\x9f\x97\x68\x22\xe2\x5a\x1e\x44\x98\x5a\x49\x83\x01\xb2\xc3\x08\x63\xcc\xaf\x7a\x1a\x9d\x3b\x23\x53\xf9\x06\x36\x83\xfe\x26\xba\x70\xcb\x0e\x88\xaa\x2e\xb1\x42\xf2\x09\x5d\x39\xe7\xbe\x2a\x4f\xcb\x61\xf5\x85\xb4\xa8\xe7\x9c\xcc\x6e\xd7\x35\x76\x03\x19\xab\x97\xa9\x25\x7f\x9c\x40\xe6\x01\x2e\x01\xde\x90\x79\xc3\x65\x56\xa2\xa6\x78\x6d\x13\x4d\x03\x31\x96\x9f\x26\x9d\x1a\xac\xda\xf6\xf3\x0b\xad\x7c\x5c\xb0\xbf\x60\x23\x03\x9f\xb7\xc9\xc6\xdb\x04\x6d\x0f\xa3\xd4\xbe\x42\x1c\x41\x2c\xda\x79\x02\x1a\x9f\xe1\xb3\xbf\x52\x5b\x7c\x94\x78\xba\xae\x9b\xb2\xc6\x30\xda\x07\x05\x95\x3b\xa8\x09\xa0\xd6\x8a\x92\x0f\xfa\xbd\x9f\x14\xbb\xf6\x4b\x54\x38\xd9\x6c\x8f\xd6\x70\xd9\xc8\x3e\x54\x9c\x2f\x86\xee\x89\x98\xfb\x53\xbf\x5d\x80\x14\xa5\x0f\xd6\x5c\x1d\x29\x4a\x1f\x31\x5e\xc2\xb8\xaa\xb1\x66\xa7\xd4\x37\x9e\x50\x00\x2f\x94\x73\x51\x34\xaf\x58\x64\x3d\xf8\xfd\x14\xca\x93\x04\x8e\x5d\x0e\x10\x34\x17\xdf\xbc\x21\xc2\x81\x88\xf8\x93\x34\xb3\x05\xb7\xa4\xc8\x0a\x35\x4d\xd5\xe0\xfe\x30\x4c\xf7\x1d\xa8\x63\x68\xab\x80\xc3\xd2\xa0\x3e\xcb\x54\xc5\x85\x3c\x06\x66\xf0\xa8\x45\xc5\xb5\x28\xd7\x74\x64\xbe\x2c\x41\x48\x3f\xd1\xbb\xb3\xf9\x58\x27\xa3\x9f\xfb\x96\xa1\x6e\x9e\xf0\x79\x6b\x52\x47\xfe\xe8\x3c\xed\xf8\x80\x0c\x76\x7e\xd1\x1c\x3a\xa4\xd3\x9e\xd9\xba\xca\x3e\x7f\xa0\x59\x98\x40\x27\x6a\x76\x74\x5c\x1d\x14\x2d\x9c\x68\x20\xef\xaa\xf6\xb1\x1e\x31\x87\x57\xef\x88\xc6\x75\xb9\x3e\x4d\xb4\xa3\xad\x1c\x52\xad\x2d\xe1\x54\xd9\x4c\x4d\x4c\x36\xc7\x4e\xbb\x60\x5d\xe5\x4c\xfd\x9e\x74\x37\x58\xd6\xa8\x0d\x3d\xf9\x5e\xf6\xde\xb2\x87\x47\x55\x95\xb5\x48\x76\x77\x35\x7e\x0b\xf0\x65\xd3\xcc\x5d\x4c\x60\xe5\x4b\xf7\x86\xa8\xb2\x30\x41\xc4\x1c\x56\x3b\x23\x25\x7c\x22\x21\x2c\x70\xed\xa5\xcf\x32\xfa\x80\x55\xb6\x20\xba\x9b\x44\x34\xc4\x2b\x6e\x61\xb4\x18\xc3\x4b\x21\xd2\xc2\x43\xcb\x12\x4a\x92\xae\x09\xc3\x65\xe6\x5f\x50\xf4\xa5\xc7\x2e\xb9\x54\x52\xa4\xbc\xbc\x41\x9e\xa1\xfe\x0b\xd7\xf4\xf5\x64\x63\x26\xa3\x82\x81\x84\x85\x94\x4b\x98\x61\x1b\x23\x4d\xd1\x18\xcc\x28\x3b\x0a\x5b\xa0\x8e\xb9\x3d\x80\x08\xb9\x68\x3b\xfe\x57\xd8\xe2\x1b\x2f\x97\x18\xc6\x26\x35\xfc\xfd\x8f\x1f\xe3\x8f\x91\xef\x14\x38\x5a\x8c\x3b\x21\xe2\xfb\x78\xab\x65\x6a\x5f\xbd\x8a\xff\x07\x00\x00\xff\xff\xde\xdb\x4e\x58\xf0\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3056, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x86, 0xa1, 0x23, 0x1f, 0x58, 0xd7, 0x34, 0xf1, 0x53, 0xb1, 0x6e, 0x3e, 0xc1, 0x64, 0x60, 0x4, 0x13, 0xf9, 0x2a, 0xee, 0xec, 0x12, 0x5c, 0x94, 0x40, 0x4d, 0x83, 0x38, 0xb5, 0x4b, 0x74}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate": {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate": {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
